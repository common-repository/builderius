parameters:
  builderius_setting.setting.css.global.values: [ 'unset','initial','inherit', 'revert', 'revert-layer']
  builderius_setting.setting.css.ext_global.values: [ 'unset','initial','inherit', 'none', 'revert', 'revert-layer' ]
  builderius_setting.setting.css.ext2_global.values: [ 'auto', 'unset','initial','inherit', 'none', 'revert', 'revert-layer' ]
  builderius_setting.setting.css_vars.type.values: [ 'integer', 'number', 'color', 'image', 'percentage', 'length', 'angle', 'time', 'any-value' ]
  builderius_setting.setting.css_vars.units.value: [ '%','px', 'em', 'rem', 'ch', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm', 'deg', 'grad', 'rad', 'turn','s', 'ms' ]
  builderius_setting.setting.data_vars.type.values:
    - graphQLQuery: 'Query to DB (GraphQL)'
      integer: 'Static integer value'
      float: 'Static float value'
      string: 'Static string value'
      bool: 'Static boolean value'
      json: 'Static json value'
      expression: 'Expression'
  builderius_setting.setting.htmltagheading.a1.values: [ 'h1','h2','h3','h4','h5','h6' ]
  builderius_setting.setting.htmltagcontainer.a1.values: [ 'div','section','main','nav','figure','address','aside','article','header','footer','details','picture', 'span', 'ul', 'ol', 'li', 'dl', 'label', 'button', 'video', 'audio', 'script' ]
  builderius_setting.setting.htmltabletagcontainer.a1.values: [ 'th', 'td' ]
  builderius_setting.setting.htmlinlinetagcontainer.a1.values: [ 'span','dt','dd','li','pre','cite','dfn','mark','noscript','script','address','samp','blockquote','label','legend','figcaption','option','caption','output','summary','ul','ol','dl']
  builderius_setting.setting.display.a1.values: [ 'flex','inline-flex','grid','inline-grid','block','inline-block','inline','table','table-row','list-item','flow-root','none','contents','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.contain.a1.values: [ 'none','strict','content','size','layout','style','paint','size paint','size layout paint','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.content_visibility.a1.values: [ 'visible','hidden','auto','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.flex-direction.a1.values: [ 'row','row-reverse','column','column-reverse','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.flex-wrap.a1.values: [ 'nowrap','wrap','wrap-reverse','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.justify-content.a1.values: [ 'flex-start','flex-end','center','space-between','space-around','space-evenly','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.align-items.a1.values: [ 'flex-start','flex-end','center','stretch','baseline','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.align-content.a1.values: [ 'flex-start','flex-end','center','stretch','space-between','space-around','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.gap.unit.values: [ '%','px','em', 'rem', 'ch', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm' ]
  builderius_setting.setting.gap.global.values: [ 'inherit', 'initial','revert','revert-layer','unset' ]
  builderius_setting.setting.flex-basis.a3.values: [ 'content','fit-content','min-content','max-content','fill','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.align-self.a1.values: ['auto', 'normal', 'stretch', 'center', 'start', 'end', 'flex-start', 'flex-end', 'self-start', 'self-end', 'left', 'right', 'safe center', 'safe start', 'safe end', 'safe flex-start', 'safe flex-end', 'safe self-start', 'safe self-end', 'safe left', 'safe right', 'unsafe center', 'unsafe start', 'unsafe end', 'unsafe flex-start', 'unsafe flex-end', 'unsafe self-start', 'unsafe self-end', 'unsafe left', 'unsafe right', 'baseline', 'first baseline', 'last baseline', 'inherit', 'initial', 'revert', 'revert-layer', 'unset']
  builderius_setting.setting.position.a1.values: [ 'static','fixed','absolute','sticky','relative','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.top.b1.values: [ 'auto','unset', 'revert', 'revert-layer','initial','inherit','%','px','em', 'rem', 'ch', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm' ]
  builderius_setting.setting.box-sizing.a1.values: [ 'border-box','content-box','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.visibility.a1.values: [ 'visible','hidden','collapse','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.overflow.a1.values: [ 'visible','hidden','clip','scroll','auto','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.float.a1.values: [ 'left','right','none','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.clear.a1.values: [ 'left','right','both','none','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.margin.unit.values: [ '%','px','em','rem', 'ch', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm','auto','inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.padding.unit.values: [ '%','px','em','rem', 'ch', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm','unset','inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.width.b1.values: [ '%','px','em', 'rem', 'ch', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm','max-content','min-content','fit-content','auto','inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.min-width.b1.values: [ '%','px','em', 'rem', 'ch', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm','max-content','min-content','fit-content','fill-available','none','inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.min-height.b1.values: [ '%','px','em', 'rem', 'ch', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm','max-content','min-content','fit-content','fill-available','none','inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.transform.c1.values: [ 'translateX','translateY','translateZ', 'scaleX','scaleY','scaleZ','rotate','rotateX','rotateY','rotateZ','skewX','skewY','perspective' ]
  builderius_setting.setting.transform.unit.values: [ 'px','em', 'rem','%','deg','turn' ]
  builderius_setting.setting.perspective.b1.values: [ 'px','em','rem','none','inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.text-align.a1.values: [ 'left','right','center','justify','justify-all','start','end','match-parent','inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.letter-spacing.b1.values: [ 'px','%','em','rem', 'ch', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm', 'inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.word-spacing.b1.values: [ 'px','%','em','rem', 'ch', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm', 'normal', 'inherit','initial','revert','revert-layer','unset'   ]
  builderius_setting.setting.text-decoration.a1.values: [ 'none', 'underline' ]
  builderius_setting.setting.word_break.a1.values: ['normal', 'break-all', 'keep-all', 'inherit', 'initial', 'revert', 'revert-layer', 'unset']
  builderius_setting.setting.overflow_wrap.a1.values: ['normal', 'break-word', 'anywhere', 'inherit', 'initial', 'revert', 'revert-layer', 'unset']
  builderius_setting.setting.white-space.a1.values: [ 'normal', 'nowrap', 'pre', 'pre-wrap', 'pre-line', 'break-spaces', 'inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.text-overflow.a1.values: [ 'clip','ellipsis','inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.text-indent.b1.values: [ 'px','%','em','rem', 'ch', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm', 'inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.user-select.a1.values: [ 'none', 'auto', 'text', 'contain', 'all', 'inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.text-transform.a1.values: [ 'none','capitalize','uppercase','lowercase','inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.clip_path.a1.values: [ 'margin-box', 'border-box', 'padding-box', 'content-box', 'fill-box', 'stroke-box', 'view-box', 'inset', 'circle', 'ellipse', 'polygon', 'path', 'url', 'inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.filter.a1.values: [ 'url', 'blur', 'brightness', 'contrast', 'drop-shadow', 'grayscale', 'hue-rotate', 'invert', 'opacity', 'saturate', 'sepia' ]
  builderius_setting.setting.text-shadow.unit.values: [ 'px','%','em','rem' ]
  builderius_setting.setting.list-style.type.values: [ 'circle','disc','square','armenian','decimal','decimal-leading-zero','georgian','lower-alpha','lower-greek','lower-latin','lower-roman','upper-alpha','upper-latin','upper-roman','custom','none','inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.list-style.position.values: [ 'inside','outside' ]
  builderius_setting.setting.border.line_width.values: [ 'px','em','rem', 'ch', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm' ]
  builderius_setting.setting.border.line_style.values: [ 'none','hidden','dotted','dashed','solid','double','groove','ridge','inset','outset' ]
  builderius_setting.setting.border-radius.units.values: [ 'px','%','em','rem', 'ch', 'vmin', 'vmax', 'cm', 'mm' ]
  builderius_setting.setting.background-image.type.values: [ 'none','image','linear-gradient','repeating-linear-gradient','radial-gradient','repeating-radial-gradient' ]
  builderius_setting.setting.background-image.shape.values: [ 'circle', 'ellipse' ]
  builderius_setting.setting.background-clip.a1.values: [ 'border-box','padding-box','content-box','text' ]
  builderius_setting.setting.background-origin.a1.values: [ 'border-box','padding-box','content-box' ]
  builderius_setting.setting.background-position.unit.values: [ '%','px','em','rem', 'ch', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm','top','bottom','left','right','center' ]
  builderius_setting.setting.background-position.keyword.values: [ 'top','bottom','left','right','center' ]
  builderius_setting.setting.background-repeat.a1.values: [ 'no-repeat','repeat','repeat-x','repeat-y','space','round','repeat space','repeat round','space repeat','space round','space no-repeat','round repeat','round space','round no-repeat','no-repeat round','no-repeat space' ]
  builderius_setting.setting.background-size.unit.values: [ '%','px','em','rem', 'ch', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm', 'auto' ]
  builderius_setting.setting.background-size.keyword.values: [ 'auto','cover','contain' ]
  builderius_setting.setting.background-attachment.a1.values: [ 'scroll','fixed','local' ]
  builderius_setting.setting.box-shadow.unit.values: [ '%','px','em','rem', 'ch', ]
  builderius_setting.setting.box-shadow.position.values: [ 'inset' ]
  builderius_setting.setting.transition.function.values: [ 'linear','ease','ease-in','ease-out','ease-in-out','step-start','step-end' ] # 'steps', 'cubic-bezier'
  builderius_setting.setting.object-fit.a1.values: [ 'none','fill','contain','cover','scale-down','inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.cursor.a1.values: [ 'none','default','auto','context-menu','help','pointer','progress','wait','cell','crosshair','text','vertical-text','alias','copy','move','no-drop','not-allowed','grab','grabbing','all-scroll','col-resize','row-resize','n-resize','e-resize','s-resize','w-resize','ne-resize','nw-resize','se-resize','sw-resize','ew-resize','ns-resize','nesw-resize','nwse-resize','zoom-in','zoom-out','inherit','initial', 'revert', 'revert-layer','unset' ]
  builderius_setting.setting.scroll_behavior.a1.values: [ 'auto','smooth','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.all.a1.values: [ 'inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.pointer-events.a1.values: [ 'auto','none','visiblePainted','visibleFill','visibleStroke','visible','painted','stroke','fill','all','inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.appearance.a1.values: [ 'none','auto','menulist-button','textfield','button','searchfield','textarea','push-button','slider-horizontal','checkbox','radio','square-button','menulist','listbox','meter','progress-bar','inherit','initial','revert','revert-layer','unset'  ]
  builderius_setting.setting.htmlattribute.a1.values: [ 'class','className','id','tabIndex','htmlFor','ref','dateTime', 'contentEditable', 'content-editable', 'data','onClick','onChange','onKeyPress','onKeyDown','onKeyUp','onLoad','onCopy','onCut','onPaste','onFocus','onBlur','onInput','onInvalid','onReset','onSubmit','onError','onTouchCancel','onTouchEnd','onTouchMove','onTouchStart','onclick','onchange','onkeypress','onkeydown','onkeyup','onload','oncopy','oncut','onpaste','onfocus','onblur','oninput','oninvalid','onreset','onsubmit','onerror','ontouchcancel','ontouchend','ontouchmove','ontouchstart' ]
  builderius_setting.setting.responsive_strategy.a1.values: ['desktop-first', 'mobile-first']
  builderius_setting.setting.datetimeformat.grouped_parts:
    - 'Day': [ 'd','D','j','l','N','S','w','z' ]
      'Week': [ 'W' ]
      'Month': [ 'F','m','M','n','t' ]
      'Year': [ 'L','o','Y','y' ]
      'Time': [ 'a','A','B','g','G','h','H','i','s','u','v' ]
      'Timezone': [ 'e','I','O','P','T','Z' ]
      'Full_Date/Time': [ 'c','r','U' ]
      'Special_Symbols': [ ':',';',',','.','/','|','-','_',' ' ]
  builderius_setting.setting.isolation.a1.values: [ 'auto', 'isolate','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.mix_blend_mode.a1.values: [ 'normal', 'multiply','screen','overlay','darken','lighten','color-dodge','color-burn','hard-light','soft-light','difference','exclusion','hue','saturation','color','luminosity','inherit','initial','revert','revert-layer','unset' ]
  builderius_setting.setting.transform-origin.keyword.values: [ 'top','bottom','left','right','center', 'unset', 'initial', 'inherit', 'revert', 'revert-layer' ]

services:
  #----------------- Global settings ------------------------------------
  builderius_setting.setting.css_vars:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusCssSetting'
    arguments:
      - displayLabel: true
        name: 'cssVars'
        label: 'CSS Variables'
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        paths: [ '@builderius_setting.path.global.advanced.css_vars', '@builderius_setting.path.template.advanced.css_vars' ]
        sortOrder: 2
        component: 'SettingCssVariables'
        options:
          values: '%builderius_setting.setting.css_vars.type.values%'
          unitsValues: '%builderius_setting.setting.css_vars.units.value%'
        schema:
          i1:
            type: 'array'
            validators:
              - type: unique
                params:
                  - 'a2'
                message: 'CSS variables names must be unique'
            of:
              type: 'object'
              validators:
                - type: cssVariableIntValue
                - type: cssVariableNumberValue
              shape:
                a1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.css_vars.type.values%'
                      message: 'CSS var type must be one of: {{haystack}}'
                a2:
                  type: 'string'
                  validators:
                    - type: cssVariableName
                b2:
                  type: 'string'
                c2:
                  type: 'string'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.css_vars.value_expression.css_vars' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.css_vars.value_expression.css_vars.anyValue:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: 'items'
        contextSource: 'i1'
        conditionExpression: 'a1 in ["any-value"] && a2 !== null && b2 !== null'
        formatExpression: "a2 ~ ': ' ~ b2"

  builderius_setting.setting.css_vars.value_expression.css_vars.simple:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: 'items'
        contextSource: 'i1'
        conditionExpression: 'a1 in ["integer","number","color"] && a2 !== null && b2 !== null'
        formatExpression: "a2 ~ ': ' ~ b2"

  builderius_setting.setting.css_vars.value_expression.css_vars.with_units:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: 'items'
        contextSource: 'i1'
        conditionExpression: 'a1 in ["percentage","length","angle","time"] && a2 !== null && b2 !== null && c2 !== null'
        formatExpression: "a2 ~ ': ' ~ b2 ~ c2"

  builderius_setting.setting.css_vars.value_expression.css_vars.image:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: 'items'
        contextSource: 'i1'
        conditionExpression: 'a1 === "image" && a2 !== null && b2 !== null'
        formatExpression: "a2 ~ ': ' ~ 'url(\"' ~ b2 ~ '\")'"

  builderius_setting.setting.css_vars.value_expression.css_vars:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.css_vars.value_expression.css_vars.simple' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.css_vars.value_expression.css_vars.with_units' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.css_vars.value_expression.css_vars.image' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.css_vars.value_expression.css_vars.anyValue' ] ]
    arguments:
      - name: null
        conditionExpression: '!(items in [null, []])'
        formatExpression: 'items'

  #----------------- Module settings ------------------------------------

  builderius_setting.setting.htmltagheading:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'htmlTagHeading'
        label: 'HTML Tag'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingSelect'
        options:
          values: '%builderius_setting.setting.htmltagheading.a1.values%'
          multiple: false
        appliedToModules: [ 'Heading' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.htmltagheading.a1.values%'
                message: 'heading tag name must be one of: {{haystack}}'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.htmltagheading.value_expression.htmltagheading' ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.htmltagheading.default_value' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.htmltagheading.value_expression.htmltagheading:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: htmlTagHeading
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.htmltagcontainer:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'htmlElementTag'
        label: 'HTML Tag'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingSelectAdvanced'
        options:
          values: '%builderius_setting.setting.htmltagcontainer.a1.values%'
          multiple: false
        appliedToModules: [ 'HtmlElement' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        showIf: 'isLinkWrapper.a1 != true'
        schema:
          a1:
            type: 'string'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.htmltagcontainer.value_expression.htmltagcontainer' ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.htmltagcontainer.default_value' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.htmltagcontainer.value_expression.htmltagcontainer:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: htmlElementTag
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.htmltagtablecontainer:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'htmlTagTableContainer'
        label: 'HTML Tag'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingSelect'
        options:
          values: '%builderius_setting.setting.htmltabletagcontainer.a1.values%'
          multiple: false
        appliedToModules: [ 'GenericTableBlock' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.htmltabletagcontainer.a1.values%'
                message: 'tag name must be one of: {{haystack}}'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.htmltagtablecontainer.value_expression.htmltagtablecontainer' ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.htmltagtablecontainer.default_value' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.htmltagtablecontainer.value_expression.htmltagtablecontainer:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: htmlTagTableContainer
        conditionExpression: 'true==true'
        formatExpression: a1

  #TODO: remove after 0.12.0
  builderius_setting.setting.htmlinlinetagcontainer:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'htmlInlineTagContainer'
        label: 'HTML Tag'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingSelect'
        options:
          values: '%builderius_setting.setting.htmlinlinetagcontainer.a1.values%'
          multiple: false
        appliedToModules: [ 'InlineElement' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        showIf: 'isLinkWrapper.a1 != true'
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.htmlinlinetagcontainer.a1.values%'
                message: 'tag name must be one of: {{haystack}}'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.htmlinlinetagcontainer.value_expression.htmlinlinetagcontainer' ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.htmlinlinetagcontainer.default_value' ] ]

  builderius_setting.setting.htmlinlinetagcontainer.value_expression.htmlinlinetagcontainer:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: htmlInlineTagContainer
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.datagenericinline:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dataHtmlElement'
        label: 'Content'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingDynamicTextarea'
        appliedToModules: [ 'HtmlElement' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
        showIf: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.datagenericinline.value_expression.datagenericinline' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.datagenericinline.value_expression.datagenericinline:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: dataHtmlElement
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.dataparagraph:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dataParagraph'
        label: 'Content'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingDynamicTextarea'
        appliedToModules: [ 'Paragraph' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
            validators:
              - type: stripTags
                params:
                  - '<b><i><em><strong><a><u><span><br><abbr><code><mark><sup><sub><kbd>'
        showIf: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.dataparagraph.value_expression.dataparagraph' ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.dataparagraph.default_value' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.dataparagraph.value_expression.dataparagraph:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: dataParagraph
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.dataselect:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dataSelect'
        label: 'Content'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingDynamicTextarea'
        appliedToModules: [ 'Select' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
        showIf: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.dataselect.value_expression.dataselect' ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.dataselect.default_value' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.dataselect.value_expression.dataselect:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: dataSelect
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.datatime:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dataTime'
        label: 'Time tag content'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingDatetimePicker'
        appliedToModules: [ 'Time' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
            validators:
              - type: dateTimeIso8601OrDynamic
        showIf: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.datatime.value_expression.datatime' ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.datatime.default_value' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.datatime.value_expression.datatime:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: dataTime
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.dataheading:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dataHeading'
        label: 'Content'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingDynamicTextarea'
        appliedToModules: [ 'Heading' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
        showIf: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.dataheading.value_expression.dataheading' ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.dataheading.default_value' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.dataheading.value_expression.dataheading:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: dataHeading
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.datarawhtml:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dataHtmlCode'
        label: 'Content'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingDynamicTextarea'
        appliedToModules: [ 'HtmlCode' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
        showIf: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.datarawhtml.value_expression.datarawhtml' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.datarawhtml.value_expression.datarawhtml:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: dataHtmlCode
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.datasvg:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dataSvgCode'
        label: 'Content Editor (HTML)'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingHtmlEditorInline'
        appliedToModules: [ 'SvgCode' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
            validators:
              - type: svgOrDynamic
        showIf: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.datasvg.value_expression.datasvg' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.datasvg.value_expression.datasvg:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: dataSvgCode
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.data_textarea:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dataTextarea'
        label: 'Content'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingDynamicTextarea'
        appliedToModules: [ 'Textarea' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
        showIf: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.data_textarea.value_expression.data_textarea' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.data_textarea.value_expression.data_textarea:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: dataTextarea
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.data_cookie_notice:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dataCookieNotice'
        label: 'Content'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingDynamicTextarea'
        appliedToModules: [ 'CookieNotice' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
        showIf: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.data_cookie_notice.value_expression.data_cookie_notice' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.data_cookie_notice.value_expression.data_cookie_notice:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: dataCookieNotice
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.datatablecell:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dataTableCell'
        label: 'Content Editor (HTML)'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingDynamicTextarea'
        appliedToModules: [ 'TableCell' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
            validators:
              - type: stripTags
                params:
                  - '<a><abbr><address><article><aside><audio><b><bdo><bdi><blockquote><br><button><canvas><cite><code><data><datalist><del><details><dfn><div><dl><em><embed><fieldset><figure><footer><form><h1><h2><h3><h4><h5><h6><header><hgroup><hr><i><iframe><img><input><ins><kbd><label><main><map><mark><math><menu><meter><nav><noscript><object><ol><output><p><picture><pre><progress><q><ruby><s><samp><script><section><select><small><span><strong><sub><sup><svg><table><template><textarea><time><u><ul><var><video><wbr>'
        showIf: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.datatablecell.value_expression.datatablecell' ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.datatablecell.default_value' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.datatablecell.value_expression.datatablecell:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: dataTableCell
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.datatableheader:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dataTableHeader'
        label: 'Content Editor (HTML)'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingDynamicTextarea'
        appliedToModules: [ 'TableHeader' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
            validators:
              - type: stripTags
                params:
                  - '<a><abbr><address><audio><b><bdo><bdi><blockquote><br><button><canvas><cite><code><data><datalist><del><details><dfn><div><dl><em><embed><fieldset><figure><form><hr><i><iframe><img><input><ins><kbd><label><main><map><mark><math><menu><meter><noscript><object><ol><output><p><picture><pre><progress><q><ruby><s><samp><script><select><small><span><strong><sub><sup><svg><table><template><textarea><time><u><ul><var><video><wbr>'
        showIf: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.datatableheader.value_expression.datatableheader' ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.datatableheader.default_value' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.datatableheader.value_expression.datatableheader:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: dataTableHeader
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.islinkwrapper:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'isLinkWrapper'
        label: 'Transform into link?'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 3
        component: 'SettingCheckbox'
        appliedToModules: [ 'HtmlElement' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'boolean'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.islinkwrapper.value_expression.islinkwrapper' ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.islinkwrapper.default_value' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.islinkwrapper.value_expression.islinkwrapper:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: isLinkWrapper
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.src:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'src'
        label: 'Image src'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 5
        component: 'SettingImage'
        appliedToModules: [ 'Image' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.src.value_expression.src' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.for_video:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'forVideo'
        label: 'Video/Audio'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 5
        component: 'SettingCheckbox'
        appliedToModules: [ 'Source' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'boolean'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.src.value_expression.src' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.src.value_expression.src:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: src
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.datetimeformat:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dateTimeFormat'
        label: 'Date/Time format'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 7
        component: 'SettingTagify'
        options:
          values: '%builderius_setting.setting.datetimeformat.grouped_parts%'
          multiple: false
        appliedToModules: [ 'Time' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'array'
            validators:
              - type: dateTimeFormat
        showIf: true
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.datetimeformat.value_expression.datetimeformat' ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.datetimeformat.default_value' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.datetimeformat.value_expression.datetimeformat:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: dateTimeFormat
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.databutton:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dataButton'
        label: 'Content'
        contentType: 'html'
        paths: ['@builderius_setting.path.module.primary.content']
        sortOrder: 2
        component: 'SettingDynamicTextarea'
        appliedToModules: [ 'Button' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
        showIf: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - ['addValueExpression', ['@builderius_setting.setting.databutton.value_expression.databutton']]
      - ['addDefaultValue', ['@builderius_setting.setting.databutton.default_value']]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.databutton.value_expression.databutton:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression'
    arguments:
      - name: dataButton
        conditionExpression: 'true==true'
        formatExpression: a1

  #TODO delete after 0.12.0
  builderius_setting.setting.ssr:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'ssr'
        label: 'Server Side Rendering'
        contentType: 'modulesWithAssetsContextPart'
        paths: ['@builderius_setting.path.module.primary.content']
        sortOrder: 1
        component: 'SettingCheckbox'
        appliedToModules: ['Collection']
        appliedToTemplateTypes: ['template']
        appliedToTechnologies: ['html']
        schema:
          a1:
            type: 'boolean'
        showIf: true
    #calls:
    #  - [ 'addValueExpression', [ '@builderius_setting.setting.ssr.value_expression.ssr' ] ]
    #tags:
    #  - { name: builderius_setting }

  builderius_setting.setting.interactive_mode:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'interactiveMode'
        label: 'Interactive Mode'
        contentType: 'modulesWithAssetsContextPart'
        paths: ['@builderius_setting.path.module.primary.content']
        sortOrder: 1
        component: 'SettingCheckbox'
        appliedToModules: ['Collection']
        appliedToTemplateTypes: ['template']
        appliedToTechnologies: ['html']
        schema:
          a1:
            type: 'boolean'
        showIf: true
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.interactive_mode.value_expression.interactive_mode' ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.interactive_mode.default_value' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.interactive_mode.value_expression.interactive_mode:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: interactiveMode
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.re_init_btn:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'reInitBtn'
        label: 'Debug/re-initialize the script'
        contentType: 'html'
        paths: ['@builderius_setting.path.module.primary.content']
        sortOrder: 2
        component: 'SettingReInitBtn'
        appliedToModules: ['Collection', 'Accordion', 'Cookieconsent']
        appliedToTemplateTypes: ['template']
        appliedToTechnologies: ['html']
        schema:
          a1:
            type: 'string'
        showIf: true
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.datashortcode:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dataShortcode'
        label: 'Content (Shortcode)'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingTextareaAsync'
        appliedToModules: [ 'Shortcode' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
        showIf: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.datashortcode.value_expression.datashortcode' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.datashortcode.value_expression.datashortcode:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: dataShortcode
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.datagutenbergblock:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'dataGutenbergBlock'
        label: 'Content (Block Code)'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 2
        component: 'SettingTextareaAsync'
        appliedToModules: [ 'GutenbergBlock' ]
        appliedToTemplateTypes: [ 'template' ]
        appliedToTechnologies: [ 'html' ]
        schema:
          a1:
            type: 'string'
        showIf: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.datagutenbergblock.value_expression.datagutenbergblock' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.datagutenbergblock.value_expression.datagutenbergblock:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: dataGutenbergBlock
        conditionExpression: 'true==true'
        formatExpression: a1

  #-----------------Category Layout---------------------------------------
  builderius_setting.setting.display:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'display'
        label: 'Display'
        paths: [ '@builderius_setting.path.module.advanced.layout', '@builderius_setting.path.template.advanced.layout', '@builderius_setting.path.global.advanced.layout' ]
        sortOrder: 1
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.display.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.display.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addDefaultValue', [ '@builderius_setting.setting.source.display.all.original.default_value', [ 'Source' ] ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.collection.display.all.original.default_value', [ 'Collection' ] ] ]
      - [ 'addDefaultValue', [ '@builderius_setting.setting.accordion.display.all.original.default_value', [ 'Accordion' ] ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.display.value_expression.display.webkit_box' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.display.value_expression.display.webkit_inline_box' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.display.value_expression.display.ms_flexbox' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.display.value_expression.display.ms_inline_flexbox' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.display.value_expression.display.webkit_flex' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.display.value_expression.display.webkit_inline_flex' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.display.value_expression.display' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.display.value_expression.display.webkit_box:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: display
        conditionExpression: "a1 == 'flex'"
        formatExpression: "css_var(v1, '-webkit-box')"

  builderius_setting.setting.display.value_expression.display.webkit_inline_box:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: display
        conditionExpression: "a1 =='inline-flex'"
        formatExpression: "css_var(v1, '-webkit-inline-box')"

  builderius_setting.setting.display.value_expression.display.ms_flexbox:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: display
        conditionExpression: "a1 == 'flex'"
        formatExpression: "css_var(v1, '-ms-flexbox')"

  builderius_setting.setting.display.value_expression.display.ms_inline_flexbox:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: display
        conditionExpression: "a1 =='inline-flex'"
        formatExpression: "css_var(v1, '-ms-inline-flexbox')"

  builderius_setting.setting.display.value_expression.display.webkit_flex:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: display
        conditionExpression: "a1 == 'flex'"
        formatExpression: "css_var(v1, '-webkit-flex')"

  builderius_setting.setting.display.value_expression.display.webkit_inline_flex:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: display
        conditionExpression: "a1 =='inline-flex'"
        formatExpression: "css_var(v1, '-webkit-inline-flex')"

  builderius_setting.setting.display.value_expression.display:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: display
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.flex-direction:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'flexDirection'
        label: 'Flex Direction'
        paths: [ '@builderius_setting.path.module.advanced.layout', '@builderius_setting.path.template.advanced.layout', '@builderius_setting.path.global.advanced.layout' ]
        sortOrder: 2
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.flex-direction.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.flex-direction.a1.values%'
          v1:
            type: 'array'
        showIf: 'display.a1 in ["flex","inline-flex"]'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.flexdirection.value_expression.msflexdirection' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.flexdirection.value_expression.flexdirection' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.flexdirection.value_expression.flexdirection:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: flexDirection
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.flexdirection.value_expression.msflexdirection:
    parent: builderius_setting.setting.flexdirection.value_expression.flexdirection
    calls:
      - [ 'setName', [ '-msFlexDirection' ] ]

  builderius_setting.setting.flex-wrap:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'flexWrap'
        label: 'Flex Wrap'
        paths: [ '@builderius_setting.path.module.advanced.layout', '@builderius_setting.path.template.advanced.layout', '@builderius_setting.path.global.advanced.layout' ]
        sortOrder: 3
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.flex-wrap.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.flex-wrap.a1.values%'
          v1:
            type: 'array'
        showIf: 'display.a1 in ["flex","inline-flex"]'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.flexwrap.value_expression.msflexwrap' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.flexwrap.value_expression.flexwrap' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.flexwrap.value_expression.flexwrap:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: flexWrap
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.flexwrap.value_expression.msflexwrap:
    parent: builderius_setting.setting.flexwrap.value_expression.flexwrap
    calls:
      - [ 'setName', [ '-msFlexWrap' ] ]

  builderius_setting.setting.justify-content:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'justifyContent'
        label: 'Justify Content'
        paths: [ '@builderius_setting.path.module.advanced.layout', '@builderius_setting.path.template.advanced.layout', '@builderius_setting.path.global.advanced.layout' ]
        sortOrder: 4
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.justify-content.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.justify-content.a1.values%'
          v1:
            type: 'array'
        showIf: 'display.a1 in ["flex","inline-flex","grid","inline-grid"]'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.justifycontent.value_expression.msflexpack' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.justifycontent.value_expression.justifycontent' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.justifycontent.value_expression.justifycontent:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: justifyContent
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.justifycontent.value_expression.msflexpackfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: 'fallback'
        conditionExpression: 'a1 !== null'
        formatExpression: "a1 == 'flex-start' ? 'start' : (a1 == 'flex-end' ? 'end' : (a1 == 'space-between' ? 'justify' : (a1 == 'space-around' ? 'distribute' : a1)))"

  builderius_setting.setting.justifycontent.value_expression.msflexpack:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.justifycontent.value_expression.msflexpackfallback' ] ]
    arguments:
      - name: '-msFlexPack'
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, fallback)'

  builderius_setting.setting.align-content:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'alignContent'
        label: 'Align Content'
        paths: [ '@builderius_setting.path.module.advanced.layout', '@builderius_setting.path.template.advanced.layout', '@builderius_setting.path.global.advanced.layout' ]
        sortOrder: 5
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.align-content.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.align-content.a1.values%'
          v1:
            type: 'array'
        showIf: 'display.a1 in ["flex","inline-flex","grid","inline-grid"]'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.aligncontent.value_expression.msflexlinepack' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.aligncontent.value_expression.aligncontent' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.aligncontent.value_expression.aligncontent:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: alignContent
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.aligncontent.value_expression.msflexlinepackfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: 'fallback'
        conditionExpression: 'a1 !== null'
        formatExpression: "a1 == 'flex-start' ? 'start' : (a1 == 'flex-end' ? 'end' : (a1 == 'space-between' ? 'justify' : (a1 == 'space-around' ? 'distribute' : a1)))"

  builderius_setting.setting.aligncontent.value_expression.msflexlinepack:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.aligncontent.value_expression.msflexlinepackfallback' ] ]
    arguments:
      - name: '-msFlexLinePack'
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, fallback)'

  builderius_setting.setting.align-items:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'alignItems'
        label: 'Align Items'
        paths: [ '@builderius_setting.path.module.advanced.layout', '@builderius_setting.path.template.advanced.layout', '@builderius_setting.path.global.advanced.layout' ]
        sortOrder: 6
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.align-items.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.align-items.a1.values%'
          v1:
            type: 'array'
        showIf: 'display.a1 in ["flex","inline-flex", "grid", "inline-grid"]'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.alignitems.value_expression.msflexalign' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.alignitems.value_expression.alignitems' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.alignitems.value_expression.alignitems:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: alignItems
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.alignitems.value_expression.msflexalignfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: 'fallback'
        conditionExpression: 'a1 !== null'
        formatExpression: "a1 == 'flex-start' ? 'start' : (a1 == 'flex-end' ? 'end' : a1)"

  builderius_setting.setting.alignitems.value_expression.msflexalign:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.alignitems.value_expression.msflexalignfallback' ] ]
    arguments:
      - name: '-msFlexAlign'
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.gap:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'gap'
        label: 'Gap'
        paths: [ '@builderius_setting.path.module.advanced.layout', '@builderius_setting.path.template.advanced.layout', '@builderius_setting.path.global.advanced.layout' ]
        sortOrder: 7
        component: 'SettingGap'
        options:
          unitValues: '%builderius_setting.setting.gap.unit.values%'
          globalValues: '%builderius_setting.setting.gap.global.values%'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.gap.unit.values%'
                message: 'Gap unit is not valid'
          a2:
            type: 'scalar'
          b2:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.gap.unit.values%'
                message: 'Gap unit is not valid'
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.gap.global.values%'
                message: 'Gap unit is not valid'
          v1:
            type: 'array'
        showIf: 'display.a1 in ["grid","inline-grid","flex","inline-flex"]'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.gap.value_expression.gap' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.gap.value_expression.globalfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "g1 !== null && g1 in ['unset','initial','inherit', 'revert', 'revert-layer']"
        formatExpression: "g1"

  builderius_setting.setting.gap.value_expression.valuefallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "g1 === null && (a1 !== null && b1 !== null) || (a2 !== null && b2 !== null)"
        formatExpression: "((a1 !== null && b1 !== null) && (a2 !== null && b2 !== null)) ? a1 ~ b1 ~ ' ' ~ a2 ~ b2 : ((a1 !== null && b1 !== null) ? a1 ~ b1 : a2 ~ b2)"

  builderius_setting.setting.gap.value_expression.gap:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.gap.value_expression.globalfallback' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.gap.value_expression.valuefallback' ] ]
    arguments:
      - name: gap
        conditionExpression: "v1 !== null || fallback !== null"
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.order:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'order'
        label: "Order"
        paths: [ '@builderius_setting.path.module.advanced.layout', '@builderius_setting.path.template.advanced.layout', '@builderius_setting.path.global.advanced.layout' ]
        sortOrder: 7
        component: 'SettingInput'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          v1:
            type: 'array'
        showIf: true
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.order.value_expression.msflexorder' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.order.value_expression.order' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.order.value_expression.order:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: order
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.order.value_expression.msflexorder:
    parent: builderius_setting.setting.order.value_expression.order
    calls:
      - [ 'setName', [ '-msFlexOrder' ] ]

  builderius_setting.setting.flex-grow:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'flexGrow'
        label: 'Flex Grow'
        paths: [ '@builderius_setting.path.module.advanced.layout', '@builderius_setting.path.template.advanced.layout', '@builderius_setting.path.global.advanced.layout' ]
        sortOrder: 8
        component: 'SettingFlexShrink'
        options:
          values: '%builderius_setting.setting.gap.global.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          a3:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.gap.global.values%'
          v1:
            type: 'array'
        showIf: true
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.flexgrow.value_expression.msflexpositive' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.flexgrow.value_expression.flexgrow' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.flexgrow.value_expression.flexgrowfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: 'a1 !== null || a3 !== null'
        formatExpression: 'a1 !== null ? a1 : a3'

  builderius_setting.setting.flexgrow.value_expression.flexgrow:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.flexgrow.value_expression.flexgrowfallback' ] ]
    arguments:
      - name: flexGrow
        conditionExpression: 'a1 !== null || a3 !== null || v1 !== null'
        formatExpression: 'css_var(v1, fallback)'

  builderius_setting.setting.flexgrow.value_expression.msflexpositive:
    parent: builderius_setting.setting.flexgrow.value_expression.flexgrow
    calls:
      - [ 'setName', [ '-msFlexPositive' ] ]

  builderius_setting.setting.flex-shrink:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'flexShrink'
        label: 'Flex Shrink'
        paths: [ '@builderius_setting.path.module.advanced.layout', '@builderius_setting.path.template.advanced.layout', '@builderius_setting.path.global.advanced.layout' ]
        sortOrder: 9
        component: 'SettingFlexShrink'
        options:
          values: '%builderius_setting.setting.gap.global.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          a3:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.gap.global.values%'
          v1:
            type: 'array'
        showIf: true
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.flexshrink.value_expression.msflexnegative' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.flexshrink.value_expression.flexshrink' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.flexshrink.value_expression.flexshrinkfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: 'a1 !== null || a3 !== null'
        formatExpression: 'a1 !== null ? a1 : a3'

  builderius_setting.setting.flexshrink.value_expression.flexshrink:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.flexshrink.value_expression.flexshrinkfallback' ] ]
    arguments:
      - name: flexShrink
        conditionExpression: 'a1 !== null || a3 !== null || v1 !== null'
        formatExpression: 'css_var(v1, fallback)'

  builderius_setting.setting.flexshrink.value_expression.msflexnegative:
    parent: builderius_setting.setting.flexshrink.value_expression.flexshrink
    calls:
      - [ 'setName', [ '-msFlexNegative' ] ]

  builderius_setting.setting.flex-basis:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'flexBasis'
        label: 'Flex Basis'
        paths: [ '@builderius_setting.path.module.advanced.layout', '@builderius_setting.path.template.advanced.layout', '@builderius_setting.path.global.advanced.layout' ]
        sortOrder: 10
        component: 'SettingFlex'
        options:
          values: '%builderius_setting.setting.flex-basis.a3.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          a3:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.flex-basis.a3.values%'
          v1:
            type: 'array'
        showIf: true
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.flexbasis.value_expression.msflexpreferredsize' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.flexbasis.value_expression.flexbasis' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.flexbasis.value_expression.flexbasisfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: 'a1 !== null || a3 !== null'
        formatExpression: 'a1 !== null ? a1 : a3'

  builderius_setting.setting.flexbasis.value_expression.flexbasis:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.flexbasis.value_expression.flexbasisfallback' ] ]
    arguments:
      - name: flexBasis
        conditionExpression: 'a1 !== null || a3 !== null || v1 !== null'
        formatExpression: 'css_var(v1, fallback)'

  builderius_setting.setting.flexbasis.value_expression.msflexpreferredsize:
    parent: builderius_setting.setting.flexbasis.value_expression.flexbasis
    calls:
      - [ 'setName', [ '-msFlexPreferredSize' ] ]

  builderius_setting.setting.align-self:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'alignSelf'
        label: "Align Self"
        paths: [ '@builderius_setting.path.module.advanced.layout', '@builderius_setting.path.template.advanced.layout', '@builderius_setting.path.global.advanced.layout' ]
        sortOrder: 11
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.align-self.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.align-self.a1.values%'
          v1:
            type: 'array'
        showIf: true
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.alignself.value_expression.msflexitemalign' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.alignself.value_expression.alignself' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.alignself.value_expression.alignself:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: alignSelf
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.alignself.value_expression.msflexitemalignfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: 'fallback'
        conditionExpression: 'a1 !== null'
        formatExpression: "a1 == 'flex-start' ? 'start' : (a1 == 'flex-end' ? 'end' : a1)"

  builderius_setting.setting.alignself.value_expression.msflexitemalign:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.alignself.value_expression.msflexitemalignfallback' ] ]
    arguments:
      - name: '-msFlexItemAlign'
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, fallback)'

  builderius_setting.setting.contain:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'contain'
        label: 'Contain'
        paths: [ '@builderius_setting.path.module.advanced.layout', '@builderius_setting.path.template.advanced.layout', '@builderius_setting.path.global.advanced.layout' ]
        sortOrder: 21
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.contain.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.contain.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.contain.value_expression.contain' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.contain.value_expression.contain:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: contain
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.content_visibility:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'contentVisibility'
        label: 'Content Visibility'
        paths: [ '@builderius_setting.path.module.advanced.layout', '@builderius_setting.path.template.advanced.layout', '@builderius_setting.path.global.advanced.layout' ]
        sortOrder: 22
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.content_visibility.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.content_visibility.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.content_visibility.value_expression.content_visibility' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.content_visibility.value_expression.content_visibility:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: contentVisibility
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  #-----------------Category Positioning---------------------------------------

  builderius_setting.setting.position:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'position'
        label: 'Position'
        paths: [ '@builderius_setting.path.module.advanced.positioning', '@builderius_setting.path.template.advanced.positioning', '@builderius_setting.path.global.advanced.positioning' ]
        sortOrder: 1
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.position.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.position.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.position.value_expression.position.webkit_sticky' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.position.value_expression.position' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.position.value_expression.position:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: position
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.position.value_expression.position.webkit_sticky:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: position
        conditionExpression: "a1 =='sticky'"
        formatExpression: "css_var(v1, '-webkit-sticky')"

  builderius_setting.setting.inset:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'inset'
        label: 'Inset'
        paths: [ '@builderius_setting.path.module.advanced.positioning', '@builderius_setting.path.template.advanced.positioning', '@builderius_setting.path.global.advanced.positioning' ]
        sortOrder: 2
        component: 'SettingFlexShrink'
        options:
          values: '%builderius_setting.setting.gap.global.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          a3:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.gap.global.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.inset.value_expression.inset' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.inset.value_expression.insetfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: 'a1 !== null || a3 !== null'
        formatExpression: 'a1 !== null ? a1 : a3'

  builderius_setting.setting.inset.value_expression.inset:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.inset.value_expression.insetfallback' ] ]
    arguments:
      - name: inset
        conditionExpression: 'a1 !== null || a3 !== null || v1 !== null'
        formatExpression: 'css_var(v1, fallback)'

  builderius_setting.setting.top:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'top'
        label: 'Top'
        paths: [ '@builderius_setting.path.module.advanced.positioning', '@builderius_setting.path.template.advanced.positioning', '@builderius_setting.path.global.advanced.positioning' ]
        sortOrder: 3
        component: 'SettingWidth'
        options:
          values: '%builderius_setting.setting.top.b1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.top.b1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.top.value_expression.top' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.top.value_expression.topfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: 'a1 !== null || b1 !== null'
        formatExpression: "(b1 in ['auto','unset','revert','revert-layer','initial','inherit'] ? b1 : a1 ~ b1)"

  builderius_setting.setting.top.value_expression.top:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.top.value_expression.topfallback' ] ]
    arguments:
      - name: top
        conditionExpression: 'a1 !== null || b1 !== null || v1 !== null'
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.right:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    parent: builderius_setting.setting.top
    calls:
      - [ 'setName', [ 'right' ] ]
      - [ 'setLabel', [ 'Right' ] ]
      - [ 'setSortOrder', [ 4 ] ]
      - [ 'setValueExpressions', [ [ '@builderius_setting.setting.right.value_expression.right' ] ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.right.value_expression.rightfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: 'a1 !== null || b1 !== null'
        formatExpression: "(b1 in ['auto','unset','revert','revert-layer','initial','inherit'] ? b1 : a1 ~ b1)"

  builderius_setting.setting.right.value_expression.right:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.right.value_expression.rightfallback' ] ]
    arguments:
      - name: right
        conditionExpression: 'a1 !== null || b1 !== null || v1 !== null'
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.bottom:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    parent: builderius_setting.setting.top
    calls:
      - [ 'setName', [ 'bottom' ] ]
      - [ 'setLabel', [ 'Bottom' ] ]
      - [ 'setSortOrder', [ 5 ] ]
      - [ 'setValueExpressions', [ [ '@builderius_setting.setting.bottom.value_expression.bottom' ] ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.bottom.value_expression.bottomfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: 'a1 !== null || b1 !== null'
        formatExpression: "(b1 in ['auto','unset','revert','revert-layer','initial','inherit'] ? b1 : a1 ~ b1)"

  builderius_setting.setting.bottom.value_expression.bottom:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.bottom.value_expression.bottomfallback' ] ]
    arguments:
      - name: bottom
        conditionExpression: 'a1 !== null || b1 !== null || v1 !== null'
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.left:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    parent: builderius_setting.setting.top
    calls:
      - [ 'setName', [ 'left' ] ]
      - [ 'setLabel', [ 'Left' ] ]
      - [ 'setSortOrder', [ 6 ] ]
      - [ 'setValueExpressions', [ [ '@builderius_setting.setting.left.value_expression.left' ] ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.left.value_expression.leftfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: 'a1 !== null || b1 !== null'
        formatExpression: "(b1 in ['auto','unset','revert','revert-layer','initial','inherit'] ? b1 : a1 ~ b1)"

  builderius_setting.setting.left.value_expression.left:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.left.value_expression.leftfallback' ] ]
    arguments:
      - name: left
        conditionExpression: 'a1 !== null || b1 !== null || v1 !== null'
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.z-index:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'zIndex'
        label: 'Z-index'
        paths: [ '@builderius_setting.path.module.advanced.positioning', '@builderius_setting.path.template.advanced.positioning', '@builderius_setting.path.global.advanced.positioning' ]
        sortOrder: 7
        component: 'SettingInput'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.z-index.value_expression.z-index' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.z-index.value_expression.z-index:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: zIndex
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.box-sizing:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'boxSizing'
        label: 'Box Sizing'
        paths: [ '@builderius_setting.path.module.advanced.positioning', '@builderius_setting.path.template.advanced.positioning', '@builderius_setting.path.global.advanced.positioning' ]
        sortOrder: 7
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.box-sizing.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.box-sizing.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.boxsizing.value_expression.boxsizing' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.boxsizing.value_expression.boxsizing:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: boxSizing
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.visibility:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'visibility'
        label: 'Visibility'
        paths: [ '@builderius_setting.path.module.advanced.positioning', '@builderius_setting.path.template.advanced.positioning', '@builderius_setting.path.global.advanced.positioning' ]
        sortOrder: 8
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.visibility.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.visibility.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.visibility.value_expression.visibility' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.visibility.value_expression.visibility:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: visibility
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.overflow:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'overflow'
        label: 'Overflow'
        paths: [ '@builderius_setting.path.module.advanced.positioning', '@builderius_setting.path.template.advanced.positioning', '@builderius_setting.path.global.advanced.positioning' ]
        sortOrder: 9
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.overflow.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.overflow.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.overflow.value_expression.overflow' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.overflow.value_expression.overflow:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: overflow
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.float:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'float'
        label: 'Float'
        paths: [ '@builderius_setting.path.module.advanced.positioning', '@builderius_setting.path.template.advanced.positioning', '@builderius_setting.path.global.advanced.positioning']
        sortOrder: 10
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.float.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.float.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.float.value_expression.float' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.float.value_expression.float:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: float
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.clear:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'clear'
        label: 'Clear'
        paths: [ '@builderius_setting.path.module.advanced.positioning', '@builderius_setting.path.template.advanced.positioning', '@builderius_setting.path.global.advanced.positioning' ]
        sortOrder: 11
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.clear.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.clear.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.clear.value_expression.clear' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.clear.value_expression.clear:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: clear
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  #-----------------Category Size-----------------------------------------

  builderius_setting.setting.margin:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'margin'
        label: 'Margin'
        paths: [ '@builderius_setting.path.module.advanced.size', '@builderius_setting.path.template.advanced.size', '@builderius_setting.path.global.advanced.size' ]
        sortOrder: 1
        component: 'SettingMargin'
        options:
          values: '%builderius_setting.setting.margin.unit.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.margin.unit.values%'
          a2:
            type: 'scalar'
          b2:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.margin.unit.values%'
          a3:
            type: 'scalar'
          b3:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.margin.unit.values%'
          a4:
            type: 'scalar'
          b4:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.margin.unit.values%'
          v1:
            type: 'array'
          v2:
            type: 'array'
          v3:
            type: 'array'
          v4:
            type: 'array'
    calls:
      #- ['addValueExpression', ['@builderius_setting.setting.margin.value_expression.margin']]
      - [ 'addValueExpression', [ '@builderius_setting.setting.margin.value_expression.margintop' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.margin.value_expression.marginright' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.margin.value_expression.marginbottom' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.margin.value_expression.marginleft' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.margin.value_expression.margintopfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: margintopfallback
        conditionExpression: "(a1 !== null && b1 !== null) || (a1 === null && b1 in ['auto', 'unset', 'initial', 'inherit'])"
        formatExpression: "b1 in ['auto', 'unset', 'initial', 'inherit'] ? b1 : a1 ~ b1"

  builderius_setting.setting.margin.value_expression.margintop:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.margin.value_expression.margintopfallback' ] ]
    arguments:
      - name: marginTop
        conditionExpression: "v1 !== null || margintopfallback !== null"
        formatExpression: "css_var(v1, margintopfallback)"

  builderius_setting.setting.margin.value_expression.marginrightfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: marginrightfallback
        conditionExpression: "(a2 !== null && b2 !== null) || (a2 === null && b2 in ['auto', 'unset', 'initial', 'inherit'])"
        formatExpression: "b2 in ['auto', 'unset', 'initial', 'inherit'] ? b2 : a2 ~ b2"

  builderius_setting.setting.margin.value_expression.marginright:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.margin.value_expression.marginrightfallback' ] ]
    arguments:
      - name: marginRight
        conditionExpression: "v2 !== null || marginrightfallback !== null"
        formatExpression: "css_var(v2, marginrightfallback)"

  builderius_setting.setting.margin.value_expression.marginbottomfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: marginbottomfallback
        conditionExpression: "(a3 !== null && b3 !== null) || (a3 === null && b3 in ['auto', 'unset', 'initial', 'inherit'])"
        formatExpression: "b3 in ['auto', 'unset', 'initial', 'inherit'] ? b3 : a3 ~ b3"

  builderius_setting.setting.margin.value_expression.marginbottom:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.margin.value_expression.marginbottomfallback' ] ]
    arguments:
      - name: marginBottom
        conditionExpression: "v3 !== null || marginbottomfallback !== null"
        formatExpression: "css_var(v3, marginbottomfallback)"

  builderius_setting.setting.margin.value_expression.marginleftfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: marginleftfallback
        conditionExpression: "(a4 !== null && b4 !== null) || (a4 === null && b4 in ['auto', 'unset', 'initial', 'inherit'])"
        formatExpression: "b4 in ['auto', 'unset', 'initial', 'inherit'] ? b4 : a4 ~ b4"

  builderius_setting.setting.margin.value_expression.marginleft:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.margin.value_expression.marginleftfallback' ] ]
    arguments:
      - name: marginLeft
        conditionExpression: "v4 !== null || marginleftfallback !== null"
        formatExpression: "css_var(v4, marginleftfallback)"

  builderius_setting.setting.margin.value_expression.marginfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: marginfallback
        conditionExpression: "a1 !== null && b1 !== null && a1 === a2 && a1 === a3 && a1 === a4 && b1 === b2 && b1 === b3 && b1 === b4"
        formatExpression: "a1 ~ b1"

  builderius_setting.setting.margin.value_expression.marginfallback.special:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: marginfallback
        conditionExpression: "a1 === null && b1 in ['auto', 'unset', 'initial', 'inherit'] && a1 === a2 && a1 === a3 && a1 === a4 && b1 === b2 && b1 === b3 && b1 === b4"
        formatExpression: "b1"

  builderius_setting.setting.margin.value_expression.margin:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.margin.value_expression.marginfallback' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.margin.value_expression.marginfallback.special' ] ]
    arguments:
      - name: margin
        conditionExpression: "(v1 === v2 && v1 === v3 && v1 === v4) || marginfallback !== null"
        formatExpression: "css_var(v1, marginfallback)"

  builderius_setting.setting.padding:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'padding'
        label: 'Padding'
        paths: [ '@builderius_setting.path.module.advanced.size', '@builderius_setting.path.template.advanced.size', '@builderius_setting.path.global.advanced.size' ]
        sortOrder: 2
        component: 'SettingMargin'
        options:
          values: '%builderius_setting.setting.padding.unit.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.padding.unit.values%'
          a2:
            type: 'scalar'
          b2:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.padding.unit.values%'
          a3:
            type: 'scalar'
          b3:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.padding.unit.values%'
          a4:
            type: 'scalar'
          b4:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.padding.unit.values%'
          v1:
            type: 'array'
          v2:
            type: 'array'
          v3:
            type: 'array'
          v4:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.padding.value_expression.paddingtop' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.padding.value_expression.paddingright' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.padding.value_expression.paddingbottom' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.padding.value_expression.paddingleft' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.padding.value_expression.paddingtopfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: paddingtopfallback
        conditionExpression: "(a1 !== null && b1 !== null) || (a1 === null && b1 in ['unset', 'initial', 'inherit', 'revert', 'revert-layer'])"
        formatExpression: "b1 in ['unset', 'initial', 'inherit', 'revert', 'revert-layer'] ? b1 : a1 ~ b1"

  builderius_setting.setting.padding.value_expression.paddingtop:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.padding.value_expression.paddingtopfallback' ] ]
    arguments:
      - name: paddingTop
        conditionExpression: "v1 !== null || paddingtopfallback !== null"
        formatExpression: "css_var(v1, paddingtopfallback)"

  builderius_setting.setting.padding.value_expression.paddingrightfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: paddingrightfallback
        conditionExpression: "(a2 !== null && b2 !== null) || (a2 === null && b2 in ['unset', 'initial', 'inherit', 'revert', 'revert-layer'])"
        formatExpression: "b2 in ['unset', 'initial', 'inherit', 'revert', 'revert-layer'] ? b2 : a2 ~ b2"

  builderius_setting.setting.padding.value_expression.paddingright:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.padding.value_expression.paddingrightfallback' ] ]
    arguments:
      - name: paddingRight
        conditionExpression: "v2 !== null || paddingrightfallback !== null"
        formatExpression: "css_var(v2, paddingrightfallback)"

  builderius_setting.setting.padding.value_expression.paddingbottomfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: paddingbottomfallback
        conditionExpression: "(a3 !== null && b3 !== null) || (a3 === null && b3 in ['unset', 'initial', 'inherit', 'revert', 'revert-layer'])"
        formatExpression: "b3 in ['unset', 'initial', 'inherit', 'revert', 'revert-layer'] ? b3 : a3 ~ b3"

  builderius_setting.setting.padding.value_expression.paddingbottom:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.padding.value_expression.paddingbottomfallback' ] ]
    arguments:
      - name: paddingBottom
        conditionExpression: "v3 !== null || paddingbottomfallback !== null"
        formatExpression: "css_var(v3, paddingbottomfallback)"

  builderius_setting.setting.padding.value_expression.paddingleftfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: paddingleftfallback
        conditionExpression: "(a4 !== null && b4 !== null) || (a4 === null && b4 in ['unset', 'initial', 'inherit', 'revert', 'revert-layer'])"
        formatExpression: "b4 in ['unset', 'initial', 'inherit', 'revert', 'revert-layer'] ? b4 : a4 ~ b4"

  builderius_setting.setting.padding.value_expression.paddingleft:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.padding.value_expression.paddingleftfallback' ] ]
    arguments:
      - name: paddingLeft
        conditionExpression: "v4 !== null || paddingleftfallback !== null"
        formatExpression: "css_var(v4, paddingleftfallback)"

  builderius_setting.setting.width:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'width'
        label: 'Width'
        paths: [ '@builderius_setting.path.module.advanced.size', '@builderius_setting.path.template.advanced.size', '@builderius_setting.path.global.advanced.size' ]
        sortOrder: 3
        component: 'SettingWidth'
        options:
          values: '%builderius_setting.setting.width.b1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.width.b1.values%'
                message: 'inArray is not valid'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.width.value_expression.width' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.width.value_expression.widthfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "(a1 !== null && b1 !== null) || (a1 === null && b1 in ['auto', 'unset', 'initial', 'inherit'])"
        formatExpression: "b1 in ['auto', 'unset', 'initial', 'inherit'] ? b1 : a1 ~ b1"

  builderius_setting.setting.width.value_expression.width:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.width.value_expression.widthfallback' ] ]
    arguments:
      - name: width
        conditionExpression: "v1 !== null || fallback !== null"
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.min-width:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'minWidth'
        label: 'Min Width'
        paths: [ '@builderius_setting.path.module.advanced.size', '@builderius_setting.path.template.advanced.size', '@builderius_setting.path.global.advanced.size' ]
        sortOrder: 4
        component: 'SettingWidth'
        options:
          values: '%builderius_setting.setting.min-width.b1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.min-width.b1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.minwidth.value_expression.minwidth' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.minwidth.value_expression.minwidthfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "(a1 !== null && b1 !== null) || (a1 === null && b1 in ['none', 'max-content', 'min-content', 'fit-content', 'fill-available', 'unset', 'initial', 'inherit'])"
        formatExpression: "b1 in ['none', 'max-content', 'min-content', 'fit-content', 'fill-available', 'unset', 'initial', 'inherit'] ? b1 : a1 ~ b1"

  builderius_setting.setting.minwidth.value_expression.minwidth:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.minwidth.value_expression.minwidthfallback' ] ]
    arguments:
      - name: minWidth
        conditionExpression: "v1 !== null || fallback !== null"
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.max-width:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    parent: builderius_setting.setting.min-width
    calls:
      - [ 'setName', [ 'maxWidth' ] ]
      - [ 'setLabel', [ 'Max Width' ] ]
      - [ 'setSortOrder', [ 5 ] ]
      - [ 'resetValues' ]
      - [ 'setValueExpressions', [ [ '@builderius_setting.setting.maxwidth.value_expression.maxwidth' ] ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.maxwidth.value_expression.maxwidthfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "(a1 !== null && b1 !== null) || (a1 === null && b1 in ['auto', 'unset', 'initial', 'inherit'])"
        formatExpression: "b1 in ['auto', 'unset', 'initial', 'inherit'] ? b1 : a1 ~ b1"

  builderius_setting.setting.maxwidth.value_expression.maxwidth:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.maxwidth.value_expression.maxwidthfallback' ] ]
    arguments:
      - name: maxWidth
        conditionExpression: "v1 !== null || fallback !== null"
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.height:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    parent: builderius_setting.setting.width
    calls:
      - [ 'setName', [ 'height' ] ]
      - [ 'setLabel', [ 'Height' ] ]
      - [ 'setSortOrder', [ 6 ] ]
      - [ 'setValueExpressions', [ [ '@builderius_setting.setting.height.value_expression.height' ] ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.height.value_expression.heightfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "(a1 !== null && b1 !== null) || (a1 === null && b1 in ['auto', 'unset', 'initial', 'inherit'])"
        formatExpression: "b1 in ['auto', 'unset', 'initial', 'inherit'] ? b1 : a1 ~ b1"

  builderius_setting.setting.height.value_expression.height:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.height.value_expression.heightfallback' ] ]
    arguments:
      - name: height
        conditionExpression: "v1 !== null || fallback !== null"
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.min-height:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'minHeight'
        label: 'Min Height'
        paths: [ '@builderius_setting.path.module.advanced.size', '@builderius_setting.path.template.advanced.size', '@builderius_setting.path.global.advanced.size' ]
        sortOrder: 7
        component: 'SettingWidth'
        options:
          values: '%builderius_setting.setting.min-height.b1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.min-height.b1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.minheight.value_expression.minheight' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.minheight.value_expression.minheightfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "(a1 !== null && b1 !== null) || (a1 === null && b1 in ['none', 'max-content', 'min-content', 'fit-content', 'fill-available', 'unset', 'initial', 'inherit'])"
        formatExpression: "b1 in ['none', 'max-content', 'min-content', 'fit-content', 'fill-available', 'unset', 'initial', 'inherit'] ? b1 : a1 ~ b1"

  builderius_setting.setting.minheight.value_expression.minheight:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.minheight.value_expression.minheightfallback' ] ]
    arguments:
      - name: minHeight
        conditionExpression: "v1 !== null || fallback !== null"
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.max-height:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    parent: builderius_setting.setting.min-height
    calls:
      - [ 'setName', [ 'maxHeight' ] ]
      - [ 'setLabel', [ 'Max Height' ] ]
      - [ 'setSortOrder', [ 8 ] ]
      - [ 'resetValues' ]
      - [ 'setValueExpressions', [ [ '@builderius_setting.setting.maxheight.value_expression.maxheight' ] ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.maxheight.value_expression.maxheightfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "(a1 !== null && b1 !== null) || (a1 === null && b1 in ['none', 'max-content', 'min-content', 'fit-content', 'fill-available', 'unset', 'initial', 'inherit'])"
        formatExpression: "b1 in ['none', 'max-content', 'min-content', 'fit-content', 'fill-available', 'unset', 'initial', 'inherit'] ? b1 : a1 ~ b1"

  builderius_setting.setting.maxheight.value_expression.maxheight:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.maxheight.value_expression.maxheightfallback' ] ]
    arguments:
      - name: maxHeight
        conditionExpression: "v1 !== null || fallback !== null"
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.transform:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'transform'
        label: 'Transform'
        paths: [ '@builderius_setting.path.module.advanced.size', '@builderius_setting.path.template.advanced.size', '@builderius_setting.path.global.advanced.size' ]
        sortOrder: 9
        component: 'SettingTransform'
        options:
          unitValues: '%builderius_setting.setting.transform.unit.values%'
          values: '%builderius_setting.setting.transform.c1.values%'
          globalValues: '%builderius_setting.setting.css.global.values%'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          v1:
            type: 'array'
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1:
                  type: 'scalar'
                b1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.transform.unit.values%'
                c1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.transform.c1.values%'
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.transform.value_expression.mstransform' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.transform.value_expression.webkittransform' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.transform.value_expression.transform' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.transform.value_expression.global:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallbackGlobal
        conditionExpression: "g1 !== null && g1 in ['none', 'unset','initial','inherit']"
        formatExpression: "g1"


  builderius_setting.setting.transform.value_expression.items:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallbackItems
        contextSource: 'i1'
        conditionExpression: "(c1 in ['translateX','translateY','translateZ','rotate','rotateX','rotateY','rotateZ','skewX','skewY','perspective'] && a1 !== null && b1 !== null) || (c1 in ['scaleX','scaleY','scaleZ'] && a1 !== null)"
        formatExpression: "c1 in ['scaleX','scaleY','scaleZ'] ? c1 ~ '(' ~ a1 ~ ')' : c1 ~ '(' ~ a1 ~ b1 ~ ')'"

  builderius_setting.setting.transform.value_expression.fallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.transform.value_expression.global' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.transform.value_expression.items' ] ]
    arguments:
      - name: fallback
        conditionExpression: "true"
        formatExpression: "fallbackGlobal !== null ? fallbackGlobal : (!(fallbackItems in [null, []])  ? join(fallbackItems, ' ') : null)"

  builderius_setting.setting.transform.value_expression.transform:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.transform.value_expression.fallback' ] ]
    arguments:
      - name: transform
        conditionExpression: "v1 !== null || fallback !== null"
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.transform.value_expression.mstransform:
    parent: builderius_setting.setting.transform.value_expression.transform
    calls:
      - [ 'setName', [ '-msTransform' ] ]

  builderius_setting.setting.transform.value_expression.webkittransform:
    parent: builderius_setting.setting.transform.value_expression.transform
    calls:
      - [ 'setName', [ '-webkitTransform' ] ]

  builderius_setting.setting.transform-origin:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'transformOrigin'
        label: 'Transform Origin'
        paths: [ '@builderius_setting.path.module.advanced.size', '@builderius_setting.path.template.advanced.size', '@builderius_setting.path.global.advanced.size' ]
        sortOrder: 10
        component: 'SettingTransformOrigin'
        options:
          unitValues: '%builderius_setting.setting.background-position.unit.values%'
          keywordValues: '%builderius_setting.setting.transform-origin.keyword.values%'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.background-position.unit.values%'
          a2:
            type: 'scalar'
          b2:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.background-position.unit.values%'
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.transform-origin.keyword.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.transform-origin.value_expression.transform-origin' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.transform-origin.value_expression.transform-origin.global:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "g1 in ['top','bottom','left','right','center', 'unset', 'initial', 'inherit', 'revert', 'revert-layer']"
        formatExpression: 'g1'

  builderius_setting.setting.transform-origin.value_expression.transform-origin.custom1:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "a1 !== null && b1 !== null && a2 !== null && b2 !== null && g1 === null"
        formatExpression: "a1 ~ b1 ~ ' ' ~ a2 ~ b2"

  builderius_setting.setting.transform-origin.value_expression.transform-origin.custom2:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "a1 !== null && b1 !== null && a2 == null && b2 in ['top','bottom','left','right','center'] && g1 === null"
        formatExpression: "a1 ~ b1 ~ ' ' ~ b2"

  builderius_setting.setting.transform-origin.value_expression.transform-origin.custom3:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "a1 == null && b1 in ['top','bottom','left','right','center'] && a2 != null && b2 !== null && g1 === null"
        formatExpression: "b1 ~ ' ' ~ a2 ~ b2"

  builderius_setting.setting.transform-origin.value_expression.transform-origin.custom4:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "b1 in ['top','bottom','left','right','center'] && b2 in ['top','bottom','left','right','center'] && b1 !== b2 && g1 === null"
        formatExpression: "b1 ~ ' ' ~ b2"

  builderius_setting.setting.transform-origin.value_expression.transform-origin.custom5:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "b1 in ['top','bottom','left','right','center'] && b2 in ['top','bottom','left','right','center'] && b1 == b2 && g1 === null"
        formatExpression: "b1"

  builderius_setting.setting.transform-origin.value_expression.transform-origin:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.transform-origin.value_expression.transform-origin.global' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.transform-origin.value_expression.transform-origin.custom1' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.transform-origin.value_expression.transform-origin.custom2' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.transform-origin.value_expression.transform-origin.custom3' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.transform-origin.value_expression.transform-origin.custom4' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.transform-origin.value_expression.transform-origin.custom5' ] ]
    arguments:
      - name: transformOrigin
        conditionExpression: "v1 !== null || fallback !== null"
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.perspective:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'perspective'
        label: 'Perspective'
        paths: [ '@builderius_setting.path.module.advanced.size', '@builderius_setting.path.template.advanced.size', '@builderius_setting.path.global.advanced.size' ]
        sortOrder: 11
        component: 'SettingWidth'
        options:
          values: '%builderius_setting.setting.width.b1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.perspective.b1.values%'
                message: 'inArray is not valid'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.perspective.value_expression.perspective' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.perspective.value_expression.perspectivefallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "(a1 !== null && b1 !== null) || b1 in ['none','inherit','initial','revert','revert-layer','unset']"
        formatExpression: "b1 in ['none','inherit','initial','revert','revert-layer','unset'] ? b1 : a1 ~ b1"

  builderius_setting.setting.perspective.value_expression.perspective:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.perspective.value_expression.perspectivefallback' ] ]
    arguments:
      - name: perspective
        conditionExpression: "v1 !== null || fallback !== null"
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.clip_path:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'clipPath'
        label: 'Clip Path'
        paths: [ '@builderius_setting.path.module.advanced.size', '@builderius_setting.path.template.advanced.size', '@builderius_setting.path.global.advanced.size' ]
        sortOrder: 12
        component: 'SettingClipPath'
        options:
          values: '%builderius_setting.setting.clip_path.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.clip_path.a1.values%'
          a2:
            type: 'scalar'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.clip_path.value_expression.clip_path' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.clip_path.value_expression.shape:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "a1 in ['inset', 'polygon', 'circle', 'ellipse', 'path', 'url'] && a2 !== null"
        formatExpression: "a1 ~ '(' ~ a2 ~ ')'"

  builderius_setting.setting.clip_path.value_expression.geometry_box:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "a1 !== null && !(a1 in ['inset', 'polygon', 'circle', 'ellipse', 'path', 'url'])"
        formatExpression: "a1"

  builderius_setting.setting.clip_path.value_expression.clip_path:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.clip_path.value_expression.shape' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.clip_path.value_expression.geometry_box' ] ]
    arguments:
      - name: clipPath
        conditionExpression: "v1 !== null || fallback !== null"
        formatExpression: "css_var(v1, fallback)"

  #-----------------Category Typography---------------------------------------

  builderius_setting.setting.color:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'color'
        label: 'Color'
        paths: [ '@builderius_setting.path.module.advanced.typography', '@builderius_setting.path.template.advanced.typography', '@builderius_setting.path.global.advanced.typography' ]
        sortOrder: 3
        component: 'SettingColor'
        options:
          values:
            - 'currentcolor'
            - 'inherit'
            - 'initial'
            - 'unset'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: color
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.color.value_expression.color' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.color.value_expression.color:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: color
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.text-align:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'textAlign'
        label: 'Text Align'
        paths: [ '@builderius_setting.path.module.advanced.typography', '@builderius_setting.path.template.advanced.typography', '@builderius_setting.path.global.advanced.typography' ]
        sortOrder: 5
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.text-align.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.text-align.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.text-align.value_expression.text-align' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.text-align.value_expression.text-align:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: textAlign
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.text-decoration:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'textDecoration'
        label: 'Text Decoration'
        paths: [ '@builderius_setting.path.module.advanced.typography', '@builderius_setting.path.template.advanced.typography', '@builderius_setting.path.global.advanced.typography' ]
        sortOrder: 8
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.text-decoration.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.text-decoration.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.textdecoration.value_expression.textdecoration' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.textdecoration.value_expression.textdecoration:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: textDecoration
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.text-transform:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'textTransform'
        label: 'Text Transform'
        paths: [ '@builderius_setting.path.module.advanced.typography', '@builderius_setting.path.template.advanced.typography', '@builderius_setting.path.global.advanced.typography' ]
        sortOrder: 9
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.text-transform.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.text-transform.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.texttransform.value_expression.texttransform' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.texttransform.value_expression.texttransform:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: textTransform
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.letter-spacing:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'letterSpacing'
        label: 'Letter Spacing'
        paths: [ '@builderius_setting.path.module.advanced.typography', '@builderius_setting.path.template.advanced.typography', '@builderius_setting.path.global.advanced.typography' ]
        sortOrder: 10
        component: 'SettingInputSelect'
        options:
          values: '%builderius_setting.setting.letter-spacing.b1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.letter-spacing.b1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.letterspacing.value_expression.letterspacing' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.letterspacing.value_expression.letterspacingfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "(a1 !== null && b1 !== null) || b1 in ['inherit', 'initial', 'revert', 'revert-layer', 'unset']"
        formatExpression: "(b1 in ['inherit', 'initial', 'revert', 'revert-layer', 'unset']) ? b1 : a1 ~ b1"

  builderius_setting.setting.letterspacing.value_expression.letterspacing:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.letterspacing.value_expression.letterspacingfallback' ] ]
    arguments:
      - name: letterSpacing
        conditionExpression: 'fallback !== null || v1 !== null'
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.text-indent:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'textIndent'
        label: 'Text Indent'
        paths: [ '@builderius_setting.path.module.advanced.typography', '@builderius_setting.path.template.advanced.typography', '@builderius_setting.path.global.advanced.typography' ]
        sortOrder: 11
        component: 'SettingInputSelect'
        options:
          values: '%builderius_setting.setting.text-indent.b1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.text-indent.b1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.textindent.value_expression.textindent' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.textindent.value_expression.textindentfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "(a1 !== null && b1 !== null) || b1 in ['inherit', 'initial', 'revert', 'revert-layer', 'unset']"
        formatExpression: "(b1 in ['inherit', 'initial', 'revert', 'revert-layer', 'unset']) ? b1 : a1 ~ b1"

  builderius_setting.setting.textindent.value_expression.textindent:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.textindent.value_expression.textindentfallback' ] ]
    arguments:
      - name: textIndent
        conditionExpression: 'fallback !== null || v1 !== null'
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.text-overflow:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'textOverflow'
        label: 'Text Overflow'
        paths: [ '@builderius_setting.path.module.advanced.typography', '@builderius_setting.path.template.advanced.typography', '@builderius_setting.path.global.advanced.typography' ]
        sortOrder: 11
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.text-overflow.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.text-overflow.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.text-overflow.value_expression.text-overflow' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.text-overflow.value_expression.text-overflow:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: textOverflow
        conditionExpression: "a1 in ['clip','ellipsis','inherit','initial', 'revert', 'revert-layer','unset'] || v1 !== null"
        formatExpression: "css_var(v1, a1)"

  builderius_setting.setting.white-space:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'whiteSpace'
        label: 'White Space'
        paths: [ '@builderius_setting.path.module.advanced.typography', '@builderius_setting.path.template.advanced.typography', '@builderius_setting.path.global.advanced.typography' ]
        sortOrder: 12
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.white-space.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.white-space.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.white-space.value_expression.white-space' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.white-space.value_expression.white-space:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: whiteSpace
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.word-spacing:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'wordSpacing'
        label: 'Word Spacing'
        paths: [ '@builderius_setting.path.module.advanced.typography', '@builderius_setting.path.template.advanced.typography', '@builderius_setting.path.global.advanced.typography' ]
        sortOrder: 13
        component: 'SettingInputSelect'
        options:
          values: '%builderius_setting.setting.word-spacing.b1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.word-spacing.b1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.wordspacing.value_expression.wordspacing' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.wordspacing.value_expression.wordspacingfallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: "(a1 !== null && b1 !== null) || b1 in ['normal', 'inherit', 'initial', 'revert', 'revert-layer', 'unset']"
        formatExpression: "(b1 in ['normal', 'inherit', 'initial', 'revert', 'revert-layer', 'unset']) ? b1 : a1 ~ b1"

  builderius_setting.setting.wordspacing.value_expression.wordspacing:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.wordspacing.value_expression.wordspacingfallback' ] ]
    arguments:
      - name: wordSpacing
        conditionExpression: 'fallback !== null || v1 !== null'
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.word_break:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'wordBreak'
        label: 'Word Break'
        paths: [ '@builderius_setting.path.module.advanced.typography', '@builderius_setting.path.template.advanced.typography', '@builderius_setting.path.global.advanced.typography' ]
        sortOrder: 14
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.word_break.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.word_break.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.word_break.value_expression.word_break' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.word_break.value_expression.word_break:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: wordBreak
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.overflow_wrap:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'overflowWrap'
        label: 'Overflow Wrap'
        paths: [ '@builderius_setting.path.module.advanced.typography', '@builderius_setting.path.template.advanced.typography', '@builderius_setting.path.global.advanced.typography' ]
        sortOrder: 15
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.overflow_wrap.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.overflow_wrap.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.overflow_wrap.value_expression.overflow_wrap' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.overflow_wrap.value_expression.overflow_wrap:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: overflowWrap
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.user-select:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'userSelect'
        label: 'User Select'
        paths: [ '@builderius_setting.path.module.advanced.typography', '@builderius_setting.path.template.advanced.typography', '@builderius_setting.path.global.advanced.typography' ]
        sortOrder: 16
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.user-select.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.user-select.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.user-select.value_expression.user-select' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.user-select.value_expression.user-select:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: userSelect
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: "css_var(v1, a1)"

  builderius_setting.setting.text-shadow:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'textShadow'
        label: 'Text Shadow'
        paths: [ '@builderius_setting.path.module.advanced.typography', '@builderius_setting.path.template.advanced.typography', '@builderius_setting.path.global.advanced.typography' ]
        sortOrder: 17
        component: 'SettingTextShadow'
        options:
          unitValues: '%builderius_setting.setting.text-shadow.unit.values%'
          globalValues: '%builderius_setting.setting.css.global.values%'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1: # offset-x val
                  type: 'scalar'
                b1: # offset-x unit
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.text-shadow.unit.values%'
                a2: # offset-y val
                  type: 'scalar'
                b2: # offset-y unit
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.text-shadow.unit.values%'
                d1: # blur val
                  type: 'scalar'
                d2: # blur unit
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.text-shadow.unit.values%'
                f1: # color
                  type: 'string'
                  validators:
                    - type: color
                v1:
                  type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.textshadow.value_expression.textshadow.main' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.textshadow.value_expression.textshadow.items:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: 'v1 !== null || (a1 !== null && a2 !== null && b1 !== null && b2 !== null)'
        formatExpression: "css_var(v1, (((a1 !== null && b1 !== null && a2 !== null && b2 !== null) ? (a1 ~ b1 ~ ' ' ~ a2 ~ b2 ~ ' '  ~ ((d1 !== null && d2 !== null) ? d1 ~ d2 ~ ' ' : '') ~ (f1 !== null ? f1 : '') ) : null)))"

  builderius_setting.setting.textshadow.value_expression.textshadow.main:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.textshadow.value_expression.textshadow.items' ] ]
    arguments:
      - name: textShadow
        conditionExpression: "true"
        formatExpression: "g1 in ['inherit', 'initial', 'revert', 'revert-layer', 'unset'] ? g1 : (!(items in [null, []]) ? join(items, ',') : null)"

  builderius_setting.setting.list-style:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'listStyle'
        label: "List Style"
        paths: [ '@builderius_setting.path.module.advanced.typography', '@builderius_setting.path.template.advanced.typography', '@builderius_setting.path.global.advanced.typography' ]
        sortOrder: 19
        component: 'SettingListStyle'
        options:
          typeValues: '%builderius_setting.setting.list-style.type.values%'
          positionValues: '%builderius_setting.setting.list-style.position.values%'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.list-style.type.values%'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.list-style.position.values%'
          c1:
            type: 'string'
            validators:
              - type: image
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.liststyle.value_expression.liststyle' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.liststyle.value_expression.liststyle.fallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: 'a1 !== null || b1 !== null || c1 !== null'
        formatExpression: "(!(a1 in [null, 'custom']) ? a1 ~ ' ' : '') ~ (b1 !== null ? b1 ~ ' ' : '') ~ (c1 !== null ? 'url(\"' ~ c1 ~ '\")' : '')"

  builderius_setting.setting.liststyle.value_expression.liststyle:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.liststyle.value_expression.liststyle.fallback' ] ]
    arguments:
      - name: listStyle
        conditionExpression: 'v1 !== null || fallback !== null'
        formatExpression: "css_var(v1, fallback)"

  #---------------------Border Category----------------------------------------------------------

  builderius_setting.setting.border:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'border'
        label: 'Border'
        paths: [ '@builderius_setting.path.module.advanced.border', '@builderius_setting.path.template.advanced.border', '@builderius_setting.path.global.advanced.border' ]
        sortOrder: 1
        component: 'SettingBorder'
        options:
          globalValues: '%builderius_setting.setting.css.global.values%'
          lineWidthValues: '%builderius_setting.setting.border.line_width.values%'
          lineStyleValues: '%builderius_setting.setting.border.line_style.values%'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border.line_width.values%'
          c1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border.line_style.values%'
          d1:
            type: 'string'
            validators:
              - type: color
          a2:
            type: 'scalar'
          b2:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border.line_width.values%'
          c2:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border.line_style.values%'
          d2:
            type: 'string'
            validators:
              - type: color
          a3:
            type: 'scalar'
          b3:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border.line_width.values%'
          c3:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border.line_style.values%'
          d3:
            type: 'string'
            validators:
              - type: color
          a4:
            type: 'scalar'
          b4:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border.line_width.values%'
          c4:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border.line_style.values%'
          d4:
            type: 'string'
            validators:
              - type: color
          v1:
            type: 'array'
          v2:
            type: 'array'
          v3:
            type: 'array'
          v4:
            type: 'array'
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          g2:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          g3:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          g4:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.border.value_expression.bordertop' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.border.value_expression.borderbottom' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.border.value_expression.borderleft' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.border.value_expression.borderright' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.border.value_expression.bordertop.fallback1:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: bordertopfallback
        conditionExpression: "g1 in ['unset', 'inherit', 'initial', 'revert', 'revert-layer']"
        formatExpression: "g1"

  builderius_setting.setting.border.value_expression.bordertop.fallback2:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: bordertopfallback
        conditionExpression: "g1 === null && ((a1 !== null && b1 !== null) || (c1 !== null) || (d1 !== null))"
        formatExpression: "((a1 !== null && b1 !== null) ? (a1 ~ b1 ~ ' ') : '') ~ (c1 !== null ? (c1 ~ ' ') : '') ~ (d1 !== null ? d1 : '')"

  builderius_setting.setting.border.value_expression.bordertop:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.border.value_expression.bordertop.fallback1' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.border.value_expression.bordertop.fallback2' ] ]
    arguments:
      - name: borderTop
        conditionExpression: "v1 !== null || bordertopfallback !== null"
        formatExpression: "css_var(v1, bordertopfallback)"

  builderius_setting.setting.border.value_expression.borderbottom.fallback1:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: borderbottomfallback
        conditionExpression: "g2 in ['unset', 'inherit', 'initial', 'revert', 'revert-layer']"
        formatExpression: "g2"

  builderius_setting.setting.border.value_expression.borderbottom.fallback2:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: borderbottomfallback
        conditionExpression: "g2 === null && ((a2 !== null && b2 !== null) || (c2 !== null) || (d2 !== null))"
        formatExpression: "((a2 !== null && b2 !== null) ? (a2 ~ b2 ~ ' ') : '') ~ (c2 !== null ? (c2 ~ ' ') : '') ~ (d2 !== null ? d2 : '')"

  builderius_setting.setting.border.value_expression.borderbottom:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.border.value_expression.borderbottom.fallback1' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.border.value_expression.borderbottom.fallback2' ] ]
    arguments:
      - name: borderBottom
        conditionExpression: "v2 !== null || borderbottomfallback !== null"
        formatExpression: "css_var(v2, borderbottomfallback)"

  builderius_setting.setting.border.value_expression.borderleft.fallback1:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: borderleftfallback
        conditionExpression: "g3 in ['unset', 'inherit', 'initial', 'revert', 'revert-layer']"
        formatExpression: "g3"

  builderius_setting.setting.border.value_expression.borderleft.fallback2:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: borderleftfallback
        conditionExpression: "g3 === null && ((a3 !== null && b3 !== null) || (c3 !== null) || (d3 !== null))"
        formatExpression: "((a3 !== null && b3 !== null) ? (a3 ~ b3 ~ ' ') : '') ~ (c3 !== null ? (c3 ~ ' ') : '') ~ (d3 !== null ? d3 : '')"

  builderius_setting.setting.border.value_expression.borderleft:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.border.value_expression.borderleft.fallback1' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.border.value_expression.borderleft.fallback2' ] ]
    arguments:
      - name: borderLeft
        conditionExpression: "v3 !== null || borderleftfallback !== null"
        formatExpression: "css_var(v3, borderleftfallback)"

  builderius_setting.setting.border.value_expression.borderright.fallback1:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: borderrightfallback
        conditionExpression: "g4 in ['unset', 'inherit', 'initial', 'revert', 'revert-layer']"
        formatExpression: "g4"

  builderius_setting.setting.border.value_expression.borderright.fallback2:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: borderrightfallback
        conditionExpression: "g4 === null && ((a4 !== null && b4 !== null) || (c4 !== null) || (d4 !== null))"
        formatExpression: "((a4 !== null && b4 !== null) ? (a4 ~ b4 ~ ' ') : '') ~ (c4 !== null ? (c4 ~ ' ') : '') ~ (d4 !== null ? d4 : '')"

  builderius_setting.setting.border.value_expression.borderright:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.border.value_expression.borderright.fallback1' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.border.value_expression.borderright.fallback2' ] ]
    arguments:
      - name: borderRight
        conditionExpression: "v4 !== null || borderrightfallback !== null"
        formatExpression: "css_var(v4, borderrightfallback)"

  builderius_setting.setting.border-radius:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'borderRadius'
        label: 'Border Radius'
        paths: [ '@builderius_setting.path.module.advanced.border', '@builderius_setting.path.template.advanced.border', '@builderius_setting.path.global.advanced.border' ]
        sortOrder: 2
        component: 'SettingBorderRadius'
        options:
          globalValues: '%builderius_setting.setting.css.global.values%'
          unitValues: '%builderius_setting.setting.border-radius.units.values%'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border-radius.units.values%'
          c1:
            type: 'scalar'
          d1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border-radius.units.values%'
          a2:
            type: 'scalar'
          b2:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border-radius.units.values%'
          c2:
            type: 'scalar'
          d2:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border-radius.units.values%'
          a3:
            type: 'scalar'
          b3:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border-radius.units.values%'
          c3:
            type: 'scalar'
          d3:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border-radius.units.values%'
          a4:
            type: 'scalar'
          b4:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border-radius.units.values%'
          c4:
            type: 'scalar'
          d4:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border-radius.units.values%'
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          g2:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          g3:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          g4:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          v1:
            type: 'array'
          v2:
            type: 'array'
          v3:
            type: 'array'
          v4:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.borderradius.value_expression.bordertopleftradius' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.borderradius.value_expression.bordertoprightradius' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.borderradius.value_expression.borderbottomleftradius' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.borderradius.value_expression.borderbottomrightradius' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.borderradius.value_expression.bordertopleftradius.fallback1:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: topleftradiusfallback
        conditionExpression: "g1 in ['unset', 'inherit', 'initial', 'revert', 'revert-layer']"
        formatExpression: "g1"

  builderius_setting.setting.borderradius.value_expression.bordertopleftradius.fallback2:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: topleftradiusfallback
        conditionExpression: "g1 === null && ((a1 !== null && b1 !== null) || (c1 !== null && d1 !== null))"
        formatExpression: "(a1 === c1 && b1 === d1) ? a1 ~ b1 : (((a1 !== null && b1 !== null) ? a1 ~ b1 ~ ' ' : '') ~ ((c1 !== null && d1 !== null) ? c1 ~ d1 ~ ' ' : ''))"

  builderius_setting.setting.borderradius.value_expression.bordertopleftradius:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.borderradius.value_expression.bordertopleftradius.fallback1' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.borderradius.value_expression.bordertopleftradius.fallback2' ] ]
    arguments:
      - name: borderTopLeftRadius
        conditionExpression: "v1 !== null || topleftradiusfallback !== null"
        formatExpression: "css_var(v1, topleftradiusfallback)"

  builderius_setting.setting.borderradius.value_expression.bordertoprightradius.fallback1:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: toprightradiusfallback
        conditionExpression: "g2 in ['unset', 'inherit', 'initial', 'revert', 'revert-layer']"
        formatExpression: "g2"

  builderius_setting.setting.borderradius.value_expression.bordertoprightradius.fallback2:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: toprightradiusfallback
        conditionExpression: "g2 === null && ((a2 !== null && b2 !== null) || (c2 !== null && d2 !== null))"
        formatExpression: "(a2 === c2 && b2 === d2) ? a2 ~ b2 : (((a2 !== null && b2 !== null) ? a2 ~ b2 ~ ' ' : '') ~ ((c2 !== null && d2 !== null) ? c2 ~ d2 ~ ' ' : ''))"

  builderius_setting.setting.borderradius.value_expression.bordertoprightradius:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.borderradius.value_expression.bordertoprightradius.fallback1' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.borderradius.value_expression.bordertoprightradius.fallback2' ] ]
    arguments:
      - name: borderTopRightRadius
        conditionExpression: "v2 !== null || toprightradiusfallback !== null"
        formatExpression: "css_var(v2, toprightradiusfallback)"

  builderius_setting.setting.borderradius.value_expression.borderbottomleftradius.fallback1:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: bottomleftradiusfallback
        conditionExpression: "g3 in ['unset', 'inherit', 'initial', 'revert', 'revert-layer']"
        formatExpression: "g3"

  builderius_setting.setting.borderradius.value_expression.borderbottomleftradius.fallback2:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: bottomleftradiusfallback
        conditionExpression: "g3 === null && ((a3 !== null && b3 !== null) || (c3 !== null && d3 !== null))"
        formatExpression: "(a3 === c3 && b3 === d3) ? a3 ~ b3 : (((a3 !== null && b3 !== null) ? a3 ~ b3 ~ ' ' : '') ~ ((c3 !== null && d3 !== null) ? c3 ~ d3 ~ ' ' : ''))"

  builderius_setting.setting.borderradius.value_expression.borderbottomleftradius:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.borderradius.value_expression.borderbottomleftradius.fallback1' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.borderradius.value_expression.borderbottomleftradius.fallback2' ] ]
    arguments:
      - name: borderBottomLeftRadius
        conditionExpression: "v3 !== null || bottomleftradiusfallback !== null"
        formatExpression: "css_var(v3, bottomleftradiusfallback)"


  builderius_setting.setting.borderradius.value_expression.borderbottomrightradius.fallback1:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: bottomrightradiusfallback
        conditionExpression: "g4 in ['unset', 'inherit', 'initial', 'revert', 'revert-layer']"
        formatExpression: "g4"

  builderius_setting.setting.borderradius.value_expression.borderbottomrightradius.fallback2:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: bottomrightradiusfallback
        conditionExpression: "g4 === null && ((a4 !== null && b4 !== null) || (c4 !== null && d4 !== null))"
        formatExpression: "(a4 === c4 && b4 === d4) ? a4 ~ b4 : (((a4 !== null && b4 !== null) ? a4 ~ b4 ~ ' ' : '') ~ ((c4 !== null && d4 !== null) ? c4 ~ d4 ~ ' ' : ''))"

  builderius_setting.setting.borderradius.value_expression.borderbottomrightradius:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.borderradius.value_expression.borderbottomrightradius.fallback1' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.borderradius.value_expression.borderbottomrightradius.fallback2' ] ]
    arguments:
      - name: borderBottomRightRadius
        conditionExpression: "v4 !== null || bottomrightradiusfallback !== null"
        formatExpression: "css_var(v4, bottomrightradiusfallback)"

  builderius_setting.setting.outline:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'outline'
        label: 'Outline'
        paths: [ '@builderius_setting.path.module.advanced.border', '@builderius_setting.path.template.advanced.border', '@builderius_setting.path.global.advanced.border' ]
        sortOrder: 3
        component: 'SettingOutline'
        options:
          globalValues: '%builderius_setting.setting.css.global.values%'
          lineWidthValues: '%builderius_setting.setting.border.line_width.values%'
          lineStyleValues: '%builderius_setting.setting.border.line_style.values%'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          b1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border.line_width.values%'
          c1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.border.line_style.values%'
          d1:
            type: 'string'
            validators:
              - type: color
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.outline.value_expression.outline' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.outline.value_expression.outline.fallback1:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: outlinefallback
        conditionExpression: "g1 in ['unset', 'inherit', 'initial', 'revert', 'revert-layer']"
        formatExpression: "g1"

  builderius_setting.setting.outline.value_expression.outline.fallback2:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: outlinefallback
        conditionExpression: "g1 === null && ((a1 !== null && b1 !== null) || (c1 !== null) || (d1 !== null))"
        formatExpression: "((a1 !== null && b1 !== null) ? (a1 ~ b1 ~ ' ') : '') ~ (c1 !== null ? (c1 ~ ' ') : '') ~ (d1 !== null ? d1 : '')"

  builderius_setting.setting.outline.value_expression.outline:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.outline.value_expression.outline.fallback1' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.outline.value_expression.outline.fallback2' ] ]
    arguments:
      - name: outline
        conditionExpression: "v1 !== null || outlinefallback !== null"
        formatExpression: "css_var(v1, outlinefallback)"

  #----------------------Background Category---------------------------------------------------------------

  builderius_setting.setting.background-color:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'backgroundColor'
        label: 'Background Color'
        paths: [ '@builderius_setting.path.module.advanced.background', '@builderius_setting.path.template.advanced.background', '@builderius_setting.path.global.advanced.background' ]
        sortOrder: 1
        component: 'SettingColor'
        options:
          values:
            - 'currentcolor'
            - 'transparent'
            - 'inherit'
            - 'initial'
            - 'revert'
            - 'revert-layer'
            - 'unset'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: color
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.backgroundcolor.value_expression.backgroundcolor' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.backgroundcolor.value_expression.backgroundcolor:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: backgroundColor
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.background-clip:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'backgroundClip'
        label: 'Background Clip'
        paths: [ '@builderius_setting.path.module.advanced.background', '@builderius_setting.path.template.advanced.background', '@builderius_setting.path.global.advanced.background' ]
        sortOrder: 2
        component: 'SettingSelectRepeater'
        options:
          values: '%builderius_setting.setting.background-clip.a1.values%'
          globalValues: '%builderius_setting.setting.css.global.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-clip.a1.values%'
                v1:
                  type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.backgroundclip.value_expression.webkitbackgroundclip' ] ]
      - [ 'addValueExpression', [ '@builderius_setting.setting.backgroundclip.value_expression.backgroundclip' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.backgroundclip.value_expression.backgroundclip.items:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.backgroundclip.value_expression.backgroundclip:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.backgroundclip.value_expression.backgroundclip.items' ] ]
    arguments:
      - name: backgroundClip
        conditionExpression: "true"
        formatExpression: "g1 in ['inherit', 'initial', 'unset', 'revert', 'revert-layer'] ? g1 : (!(items in [null, []]) ? join(items, ',') : null)"

  builderius_setting.setting.backgroundclip.value_expression.webkitbackgroundclip:
    parent: builderius_setting.setting.backgroundclip.value_expression.backgroundclip
    calls:
      - [ 'setName', [ '-webkitBackgroundClip' ] ]

  builderius_setting.setting.background-image:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'backgroundImage'
        label: 'Background Image'
        paths: [ '@builderius_setting.path.module.advanced.background', '@builderius_setting.path.template.advanced.background', '@builderius_setting.path.global.advanced.background' ]
        sortOrder: 3
        component: 'SettingBgImage'
        options:
          values: '%builderius_setting.setting.background-image.type.values%'
          globalValues: '%builderius_setting.setting.css.global.values%'
          shapeValues: '%builderius_setting.setting.background-image.shape.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1:
                  type: 'string'
                  validators:
                    - type: image
                b1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-image.type.values%'
                c1:
                  type: 'scalar'
                d1:
                  type: 'array'
                  of:
                    type: 'object'
                    shape:
                      id:
                        type: 'integer'
                      pos:
                        type: 'integer'
                      code:
                        type: 'string'
                        validators:
                          - type: color
                e1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-image.shape.values%'
                v1:
                  type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.background-image.value_expression.background-image' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.background-image.value_expression.special_value:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "b1 in ['none', null]"
        formatExpression: "css_var(v1, b1)"

  builderius_setting.setting.background-image.value_expression.image:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "b1 === 'image' && a1 !== null"
        formatExpression: "css_var(v1, ('url(\"' ~ a1 ~ '\")'))"

  builderius_setting.setting.background-image.value_expression.image.not_valid:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "b1 === 'image' && a1 === null"
        formatExpression: "css_var(v1, null)"

  builderius_setting.setting.background-image.value_expression.linear:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "b1 in ['linear-gradient', 'repeating-linear-gradient'] && c1 !== null && d1 !== null && !is_empty(d1)"
        formatExpression: "css_var(v1, (b1 ~ '(' ~ c1 ~ 'deg, ' ~ bg_img_gradient(d1) ~ ')'))"

  builderius_setting.setting.background-image.value_expression.linear.not_valid:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "b1 in ['linear-gradient', 'repeating-linear-gradient'] && (c1 === null || d1 === null || is_empty(d1))"
        formatExpression: "css_var(v1, null)"

  builderius_setting.setting.background-image.value_expression.radial:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "b1 in ['radial-gradient', 'repeating-radial-gradient'] && e1 !== null && d1 !== null && !is_empty(d1)"
        formatExpression: "css_var(v1, (b1 ~ '(' ~ e1 ~ ', ' ~ bg_img_gradient(d1) ~ ')'))"

  builderius_setting.setting.background-image.value_expression.radial.not_valid:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "b1 in ['radial-gradient', 'repeating-radial-gradient'] && (e1 === null || d1 === null || is_empty(d1))"
        formatExpression: "css_var(v1, null)"

  builderius_setting.setting.background-image.value_expression.background-image:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.background-image.value_expression.special_value' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.background-image.value_expression.image' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.background-image.value_expression.linear' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.background-image.value_expression.radial' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.background-image.value_expression.image.not_valid' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.background-image.value_expression.linear.not_valid' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.background-image.value_expression.radial.not_valid' ] ]
    arguments:
      - name: backgroundImage
        conditionExpression: "true"
        formatExpression: "g1 in ['inherit', 'initial', 'unset', 'revert', 'revert-layer'] ? g1 : (!(items in [null, []]) ? join(items, ',') : null)"

  builderius_setting.setting.background-origin:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'backgroundOrigin'
        label: 'Background Origin'
        paths: [ '@builderius_setting.path.module.advanced.background', '@builderius_setting.path.template.advanced.background', '@builderius_setting.path.global.advanced.background' ]
        sortOrder: 4
        component: 'SettingSelectRepeater'
        options:
          values: '%builderius_setting.setting.background-origin.a1.values%'
          globalValues: '%builderius_setting.setting.css.global.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-origin.a1.values%'
                v1:
                  type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.backgroundorigin.value_expression.backgroundorigin' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.backgroundorigin.value_expression.backgroundorigin.items:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.backgroundorigin.value_expression.backgroundorigin:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.backgroundorigin.value_expression.backgroundorigin.items' ] ]
    arguments:
      - name: backgroundOrigin
        conditionExpression: "true"
        formatExpression: "g1 in ['inherit', 'initial', 'unset', 'revert', 'revert-layer'] ? g1 : (!(items in [null, []]) ? join(items, ',') : null)"

  builderius_setting.setting.background-position:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'backgroundPosition'
        label: 'Background Position'
        paths: [ '@builderius_setting.path.module.advanced.background', '@builderius_setting.path.template.advanced.background', '@builderius_setting.path.global.advanced.background' ]
        sortOrder: 5
        component: 'SettingBgPosition'
        options:
          unitValues: '%builderius_setting.setting.background-position.unit.values%'
          keywordValues: '%builderius_setting.setting.background-position.keyword.values%'
          globalValues: '%builderius_setting.setting.css.global.values%'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1:
                  type: 'mixed'
                b1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-position.unit.values%'
                a2:
                  type: 'scalar'
                b2:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-position.unit.values%'
                c1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-position.keyword.values%'
                v1:
                  type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.backgroundposition.value_expression.backgroundposition' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.backgroundposition.value_expression.backgroundposition.onekeyword:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "c1 !== null || (v1 !== null && c1 === null && a1 === null && b1 === null && a2 === null && b2 === null)"
        formatExpression: "css_var(v1, c1)"

  builderius_setting.setting.backgroundposition.value_expression.backgroundposition.twokeywords:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "a1 === null && b1 in [null,'top','bottom','left','right','center'] && a2 === null && b2 in [null,'top','bottom','left','right','center'] && c1 === null && (b1 !== null || b2 !== null)"
        formatExpression: "css_var(v1, (b1 === b2 ? b1 : (((b1 === 'left' && b2 === 'right') || (b1 === 'right' && b2 === 'left') || (b1 === 'top' && b2 === 'bottom') || (b1 === 'bottom' && b2 === 'top')) ? null : ((b1 !== null ? b1 : '') ~ (b1 !== null && b2 !== null ? ' ' : '') ~ (b2 !== null ? b2 : '')))))"

  builderius_setting.setting.backgroundposition.value_expression.backgroundposition.custom:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "((a1 !== null && !(b1 in [null,'top','bottom','left','right','center'])) || (a2 !== null && !(b2 in [null,'top','bottom','left','right','center']))) && c1 === null"
        formatExpression: "css_var(v1, (((a1 !== null && !(b1 in [null,'top','bottom','left','right','center'])) ? a1 ~ b1 : (b1 in ['top','bottom','left','right','center'] ? b1 : (b2 !== null ? '50%%' : '')))) ~ ((a2 !== null && !(b2 in [null,'top','bottom','left','right','center'])) ? ' ' ~ a2 ~ b2 : (b2 in ['top','bottom','left','right','center'] ? ' ' ~ b2 : '')))"

  builderius_setting.setting.backgroundposition.value_expression.backgroundposition:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.backgroundposition.value_expression.backgroundposition.onekeyword' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.backgroundposition.value_expression.backgroundposition.twokeywords' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.backgroundposition.value_expression.backgroundposition.custom' ] ]
    arguments:
      - name: backgroundPosition
        conditionExpression: "true"
        formatExpression: "g1 in ['inherit', 'initial', 'unset', 'revert', 'revert-layer'] ? g1 : (!(items in [null, []]) ? join(items, ',') : null)"

  builderius_setting.setting.background-repeat:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'backgroundRepeat'
        label: 'Background Repeat'
        paths: [ '@builderius_setting.path.module.advanced.background', '@builderius_setting.path.template.advanced.background', '@builderius_setting.path.global.advanced.background' ]
        sortOrder: 6
        component: 'SettingSelectRepeater'
        options:
          values: '%builderius_setting.setting.background-repeat.a1.values%'
          globalValues: '%builderius_setting.setting.css.global.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-repeat.a1.values%'
                v1:
                  type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.backgroundrepeat.value_expression.backgroundrepeat' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.backgroundrepeat.value_expression.backgroundrepeat.items:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.backgroundrepeat.value_expression.backgroundrepeat:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.backgroundrepeat.value_expression.backgroundrepeat.items' ] ]
    arguments:
      - name: backgroundRepeat
        conditionExpression: "true"
        formatExpression: "g1 in ['inherit', 'initial', 'unset', 'revert', 'revert-layer'] ? g1 : (!(items in [null, []]) ? join(items, ',') : null)"

  builderius_setting.setting.background-size:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'backgroundSize'
        label: 'Background Size'
        paths: [ '@builderius_setting.path.module.advanced.background', '@builderius_setting.path.template.advanced.background', '@builderius_setting.path.global.advanced.background' ]
        sortOrder: 7
        component: 'SettingBgPosition'
        options:
          unitValues: '%builderius_setting.setting.background-size.unit.values%'
          keywordValues: '%builderius_setting.setting.background-size.keyword.values%'
          globalValues: '%builderius_setting.setting.css.global.values%'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1:
                  type: 'scalar'
                b1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-size.unit.values%'
                a2:
                  type: 'scalar'
                b2:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-size.unit.values%'
                c1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-size.keyword.values%'
                v1:
                  type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.background-size.value_expression.background-size' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.background-size.value_expression.background-size.keywords:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "c1 !== null || (v1 !== null && c1 === null && a1 === null && b1 === null && a2 === null && b2 === null)"
        formatExpression: "css_var(v1, c1)"

  builderius_setting.setting.background-size.value_expression.background-size.custom.mixed:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "((a1 !== null && !(b1 in [null, 'auto'])) || (a2 !== null && !(b2 in [null, 'auto']))) && c1 === null"
        formatExpression: "css_var(v1, (((a1 !== null && !(b1 in [null, 'auto'])) ? a1 ~ b1 ~ ' ' : ((a2 !== null && !(b2 in [null, 'auto'])) || b1 === 'auto' ? 'auto ' : '')) ~ ((a2 !== null && !(b2 in [null, 'auto'])) ? a2 ~ b2 : (b2 === 'auto' ? 'auto' : ''))))"

  builderius_setting.setting.background-size.value_expression.background-size.custom.just_special:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "b1 === 'auto' && b2 === 'auto' && c1 === null"
        formatExpression: "css_var(v1, b1)"

  builderius_setting.setting.background-size.value_expression.background-size:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.background-size.value_expression.background-size.keywords' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.background-size.value_expression.background-size.custom.just_special' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.background-size.value_expression.background-size.custom.mixed' ] ]
    arguments:
      - name: backgroundSize
        conditionExpression: "true"
        formatExpression: "g1 in ['inherit', 'initial', 'unset', 'revert', 'revert-layer'] ? g1 : (!(items in [null, []]) ? join(items, ',') : null)"

  builderius_setting.setting.background-attachment:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'backgroundAttachment'
        label: 'Background Attachment'
        paths: [ '@builderius_setting.path.module.advanced.background', '@builderius_setting.path.template.advanced.background', '@builderius_setting.path.global.advanced.background' ]
        sortOrder: 8
        component: 'SettingSelectRepeater'
        options:
          values: '%builderius_setting.setting.background-attachment.a1.values%'
          globalValues: '%builderius_setting.setting.css.global.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-attachment.a1.values%'
                v1:
                  type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.backgroundattachment.value_expression.backgroundattachment' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.backgroundattachment.value_expression.backgroundattachment.items:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.backgroundattachment.value_expression.backgroundattachment:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.backgroundattachment.value_expression.backgroundattachment.items' ] ]
    arguments:
      - name: backgroundAttachment
        conditionExpression: "true"
        formatExpression: "g1 in ['inherit', 'initial', 'unset', 'revert', 'revert-layer'] ? g1 : (!(items in [null, []]) ? join(items, ',') : null)"

  builderius_setting.setting.fill:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'fill'
        label: 'Fill'
        paths: [ '@builderius_setting.path.module.advanced.background', '@builderius_setting.path.template.advanced.background', '@builderius_setting.path.global.advanced.background' ]
        sortOrder: 9
        component: 'SettingColor'
        options:
          values: [ ]
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: color
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.color.value_expression.fill' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.color.value_expression.fill:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fill
        conditionExpression: 'v1 !== null || a1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.stroke:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'stroke'
        label: 'Stroke'
        paths: [ '@builderius_setting.path.module.advanced.background', '@builderius_setting.path.template.advanced.background', '@builderius_setting.path.global.advanced.background' ]
        sortOrder: 10
        component: 'SettingColor'
        options:
          values: [ ]
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: color
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.color.value_expression.stroke' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.color.value_expression.stroke:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: stroke
        conditionExpression: 'v1 !== null || a1 !== null'
        formatExpression: 'css_var(v1, a1)'

  #-----------------Category Extra---------------------------------------

  builderius_setting.setting.all:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'all'
        label: "All"
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 1
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.all.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.all.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.all.value_expression.all' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.all.value_expression.all:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: all
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.box-shadow:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'boxShadow'
        label: 'Box Shadow'
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 1
        component: 'SettingBoxShadow'
        options:
          positionValues: '%builderius_setting.setting.box-shadow.position.values%'
          unitValues: '%builderius_setting.setting.box-shadow.unit.values%'
          globalValues: '%builderius_setting.setting.css.ext_global.values%'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.ext_global.values%'
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1: # offset-x val
                  type: 'scalar'
                b1: # offset-x unit
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.box-shadow.unit.values%'
                a2: # offset-y val
                  type: 'scalar'
                b2: # offset-y unit
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.box-shadow.unit.values%'
                c1: # inset
                  type: 'boolean'
                d1: # blur val
                  type: 'scalar'
                d2: # blur unit
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.box-shadow.unit.values%'
                e1: # spread val
                  type: 'scalar'
                e2: # spread unit
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.box-shadow.unit.values%'
                f1: # color
                  type: 'string'
                  validators:
                    - type: color
                v1:
                  type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.boxshadow.value_expression.boxshadow' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.boxshadow.value_expression.boxshadow.items:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: 'v1 !== null || (a1 !== null && a2 !== null) || (b1 !== null && b2 !== null) || (d1 !== null && d2 !== null) || (e1 !== null && e2 !== null) || f1 !== null'
        formatExpression: "css_var(v1, ((c1 === true ? 'inset ' : '') ~ ((a1 !== null && b1 !== null) ? a1 ~ b1 ~ ' ' : ((a2 !== null || d1 !== null || e1 !== null) ? '0 ' : '')) ~ ((a2 !== null && b2 !== null) ? a2 ~ b2 ~ ' ' : ((d1 !== null || e1 !== null) ? '0 ' : '')) ~ ((d1 !== null && d2 !== null) ? d1 ~ d2 ~ ' ' : (e1 !== null ? '0 ' : '')) ~ ((e1 !== null && e2 !== null) ? e1 ~ e2 ~ ' ' : '') ~ (f1 !== null ? f1 : '')))"

  builderius_setting.setting.boxshadow.value_expression.boxshadow:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.boxshadow.value_expression.boxshadow.items' ] ]
    arguments:
      - name: boxShadow
        conditionExpression: "true"
        formatExpression: "g1 in ['inherit', 'initial', 'unset', 'none', 'revert', 'revert-layer'] ? g1 : (!(items in [null, []]) ? join(items, ',') : null)"

  builderius_setting.setting.transition:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'transition'
        label: 'Transition'
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 2
        component: 'SettingTransition'
        options:
          globalValues: '%builderius_setting.setting.css.ext_global.values%'
          functionValues: '%builderius_setting.setting.transition.function.values%'
          propertyValues:
            - 'all'
            - 'background'
            - 'background-color'
            - 'background-position'
            - 'background-size'
            - 'border-top'
            - 'border-right'
            - 'border-bottom'
            - 'border-left'
            - 'border-color'
            - 'border-width'
            - 'border-radius'
            - 'top'
            - 'right'
            - 'bottom'
            - 'left'
            - 'box-shadow'
            - 'clip'
            - 'clip-path'
            - 'color'
            - 'flex'
            - 'flex-basis'
            - 'flex-grow'
            - 'font-size'
            - 'font-weight'
            - 'height'
            - 'letter-spacing'
            - 'line-height'
            - 'margin-top'
            - 'margin-right'
            - 'margin-bottom'
            - 'margin-left'
            - 'opacity'
            - 'order'
            - 'padding-top'
            - 'padding-right'
            - 'padding-bottom'
            - 'padding-left'
            - 'rotate'
            - 'scale'
            - 'text-shadow'
            - 'transform'
            - 'visibility'
            - 'width'
            - 'z-index'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.ext_global.values%'
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1: # transition-property
                  type: 'scalar'
                b1: # transition-duration
                  type: 'scalar'
                c1: # transition-timing-function
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.transition.function.values%'
                c2:
                  type: 'array'
                d1: # transition-delay
                  type: 'scalar'
                v1:
                  type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.transition.value_expression.transition.main' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.transition.value_expression.transition.items:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: 'v1 !== null || a1 !== null || b1 !== null || c1 !== null || d1 !== null'
        formatExpression: "css_var(v1, ((a1 !== null ? a1 ~ ' ' : '') ~ (b1 !== null ? b1 ~ 's ' : (d1 !== null) ? '0s ' : '') ~ (c1 !== null ? c1 ~ (c2 !== null ? '(' ~ join(c2, ',') ~ ')' : '') ~ ' ' : '') ~ (d1 == null ? '' : d1 ~ 's')))"

  builderius_setting.setting.transition.value_expression.transition.main:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.transition.value_expression.transition.items' ] ]
    arguments:
      - name: transition
        conditionExpression: "true"
        formatExpression: "g1 in ['inherit', 'initial', 'unset', 'none', 'revert', 'revert-layer'] ? g1 : (!(items in [null, []]) ? join(items, ',') : null)"

  builderius_setting.setting.opacity:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'opacity'
        label: 'Opacity'
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 3
        component: 'SettingOpacity'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.opacity.value_expression.opacity' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.opacity.value_expression.opacity:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: opacity
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.cursor:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'cursor'
        label: "Cursor"
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 4
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.cursor.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.cursor.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.cursor.value_expression.cursor' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.cursor.value_expression.cursor:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: cursor
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.scroll_behavior:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'scrollBehavior'
        label: "Scroll Behaviour"
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 4
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.scroll_behavior.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.scroll_behavior.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.scroll_behavior.value_expression.scroll_behavior' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.scroll_behavior.value_expression.scroll_behavior:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: scrollBehavior
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.content:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'content'
        label: "Content"
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 5
        component: 'SettingInput'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.content.value_expression.content' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.content.value_expression.content:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: content
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.aspect_ratio:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'aspectRatio'
        label: 'Aspect Ratio'
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 2
        component: 'SettingFlexShrink'
        options:
          values: '%builderius_setting.setting.gap.global.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'scalar'
          a3:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.gap.global.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.aspect_ratio.value_expression.aspect_ratio' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.aspect_ratio.value_expression.aspect_ratiofallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallback
        conditionExpression: 'a1 !== null || a3 !== null'
        formatExpression: 'a1 !== null ? a1 : a3'

  builderius_setting.setting.aspect_ratio.value_expression.aspect_ratio:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.aspect_ratio.value_expression.aspect_ratiofallback' ] ]
    arguments:
      - name: aspectRatio
        conditionExpression: 'a1 !== null || a3 !== null || v1 !== null'
        formatExpression: 'css_var(v1, fallback)'

  builderius_setting.setting.objectfit:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'objectFit'
        label: "Object Fit"
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 5
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.object-fit.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.object-fit.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.objectfit.value_expression.objectfit' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.objectfit.value_expression.objectfit:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: objectFit
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.object_position:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'objectPosition'
        label: 'Object Position'
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 6
        component: 'SettingBgPosition'
        options:
          unitValues: '%builderius_setting.setting.background-position.unit.values%'
          keywordValues: '%builderius_setting.setting.background-position.keyword.values%'
          globalValues: '%builderius_setting.setting.css.global.values%'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.global.values%'
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1:
                  type: 'scalar'
                b1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-position.unit.values%'
                a2:
                  type: 'scalar'
                b2:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-position.unit.values%'
                c1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.background-position.keyword.values%'
                v1:
                  type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.object_position.value_expression.object_position' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.object_position.value_expression.object_position.onekeyword:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "c1 !== null || (v1 !== null && c1 === null && a1 === null && b1 === null && a2 === null && b2 === null)"
        formatExpression: "css_var(v1, c1)"

  builderius_setting.setting.object_position.value_expression.object_position.twokeywords:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "a1 === null && b1 in [null,'top','bottom','left','right','center'] && a2 === null && b2 in [null,'top','bottom','left','right','center'] && c1 === null && (b1 !== null || b2 !== null)"
        formatExpression: "css_var(v1, (b1 === b2 ? b1 : (((b1 === 'left' && b2 === 'right') || (b1 === 'right' && b2 === 'left') || (b1 === 'top' && b2 === 'bottom') || (b1 === 'bottom' && b2 === 'top')) ? null : ((b1 !== null ? b1 : '') ~ (b1 !== null && b2 !== null ? ' ' : '') ~ (b2 !== null ? b2 : '')))))"

  builderius_setting.setting.object_position.value_expression.object_position.custom:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: items
        contextSource: 'i1'
        conditionExpression: "((a1 !== null && !(b1 in [null,'top','bottom','left','right','center'])) || (a2 !== null && !(b2 in [null,'top','bottom','left','right','center']))) && c1 === null"
        formatExpression: "css_var(v1, (((a1 !== null && !(b1 in [null,'top','bottom','left','right','center'])) ? a1 ~ b1 : (b1 in ['top','bottom','left','right','center'] ? b1 : (b2 !== null ? '50%%' : '')))) ~ ((a2 !== null && !(b2 in [null,'top','bottom','left','right','center'])) ? ' ' ~ a2 ~ b2 : (b2 in ['top','bottom','left','right','center'] ? ' ' ~ b2 : '')))"

  builderius_setting.setting.object_position.value_expression.object_position:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.object_position.value_expression.object_position.onekeyword' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.object_position.value_expression.object_position.twokeywords' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.object_position.value_expression.object_position.custom' ] ]
    arguments:
      - name: objectPosition
        conditionExpression: "true"
        formatExpression: "g1 in ['inherit', 'initial', 'unset', 'revert', 'revert-layer'] ? g1 : (!(items in [null, []]) ? join(items, ',') : null)"

  builderius_setting.setting.pointer-events:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'pointerEvents'
        label: "Pointer Events"
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 7
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.pointer-events.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.pointer-events.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.pointer-events.value_expression.pointer-events' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.pointer-events.value_expression.pointer-events:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: pointerEvents
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.appearance:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'appearance'
        label: 'Appearance'
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 8
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.appearance.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.appearance.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.appearance.value_expression.appearance' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.appearance.value_expression.appearance:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: appearance
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.filter:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'filter'
        label: 'Filter'
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 9
        component: 'SettingFilter'
        options:
          globalValues: '%builderius_setting.setting.css.ext_global.values%'
          doubleValues: '%builderius_setting.setting.filter.a1.values%'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          v1:
            type: 'array'
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.filter.a1.values%'
                a2:
                  type: 'scalar'
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.ext_global.values%'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.filter.value_expression.filter' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.filter.value_expression.global:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallbackGlobal
        conditionExpression: "g1 !== null && g1 in ['none', 'unset','initial','inherit']"
        formatExpression: "g1"

  builderius_setting.setting.filter.value_expression.items:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallbackItems
        contextSource: 'i1'
        conditionExpression: "a1 !== null && a2 !== null"
        formatExpression: "a1 ~ '(' ~ a2 ~ ')'"

  builderius_setting.setting.filter.value_expression.fallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.filter.value_expression.global' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.filter.value_expression.items' ] ]
    arguments:
      - name: fallback
        conditionExpression: "true"
        formatExpression: "fallbackGlobal !== null ? fallbackGlobal : (!(fallbackItems in [null, []])  ? join(fallbackItems, ' ') : null)"

  builderius_setting.setting.filter.value_expression.filter:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.filter.value_expression.fallback' ] ]
    arguments:
      - name: filter
        conditionExpression: "v1 !== null || fallback !== null"
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.backdrop_filter:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'backdropFilter'
        label: 'Backdrop Filter'
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 9
        component: 'SettingFilter'
        options:
          globalValues: '%builderius_setting.setting.css.ext_global.values%'
          doubleValues: '%builderius_setting.setting.filter.a1.values%'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          v1:
            type: 'array'
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.filter.a1.values%'
                a2:
                  type: 'scalar'
          g1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.css.ext_global.values%'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.backdrop_filter.value_expression.filter' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.backdrop_filter.value_expression.global:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallbackGlobal
        conditionExpression: "g1 !== null && g1 in ['none', 'unset','initial','inherit']"
        formatExpression: "g1"

  builderius_setting.setting.backdrop_filter.value_expression.items:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: fallbackItems
        contextSource: 'i1'
        conditionExpression: "a1 !== null && a2 !== null"
        formatExpression: "a1 ~ '(' ~ a2 ~ ')'"

  builderius_setting.setting.backdrop_filter.value_expression.fallback:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.backdrop_filter.value_expression.global' ] ]
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.backdrop_filter.value_expression.items' ] ]
    arguments:
      - name: fallback
        conditionExpression: "true"
        formatExpression: "fallbackGlobal !== null ? fallbackGlobal : (!(fallbackItems in [null, []])  ? join(fallbackItems, ' ') : null)"

  builderius_setting.setting.backdrop_filter.value_expression.filter:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.backdrop_filter.value_expression.fallback' ] ]
    arguments:
      - name: backdropFilter
        conditionExpression: "v1 !== null || fallback !== null"
        formatExpression: "css_var(v1, fallback)"

  builderius_setting.setting.isolation:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'isolation'
        label: "Isolation"
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 4
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.isolation.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.isolation.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.isolation.value_expression.isolation' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.isolation.value_expression.isolation:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: isolation
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  builderius_setting.setting.mix_blend_mode:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'mixBlendMode'
        label: "Mix Blend Mode"
        paths: [ '@builderius_setting.path.module.advanced.extra', '@builderius_setting.path.template.advanced.extra', '@builderius_setting.path.global.advanced.extra' ]
        sortOrder: 4
        component: 'SettingSelectWithClear'
        options:
          values: '%builderius_setting.setting.mix_blend_mode.a1.values%'
          multiple: false
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.mix_blend_mode.a1.values%'
          v1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.mix_blend_mode.value_expression.mix_blend_mode' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.mix_blend_mode.value_expression.mix_blend_mode:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: mixBlendMode
        conditionExpression: 'a1 !== null || v1 !== null'
        formatExpression: 'css_var(v1, a1)'

  #-----------------Category HTML attributes---------------------------------------

  builderius_setting.setting.tagclass:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'tagClass'
        label: 'Classes'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.html_attr' ]
        sortOrder: 1
        component: 'SettingTagClass'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        schema:
          a1:
            type: 'array'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.tagclass.value_expression.tagclass' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.tagclass.value_expression.tagclass:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: 'tagClass'
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.tagid:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    arguments:
      - displayLabel: true
        name: 'tagId'
        label: 'ID'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.html_attr' ]
        sortOrder: 2
        component: 'SettingDynamicInput'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        dynamicData: true
        dynamicDataTypes: ['scalar']
        schema:
          a1:
            type: 'string'
            validators:
              - type: tagId
                message: 'HTML id is not valid'

    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.tagclass.value_expression.tagid' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.tagclass.value_expression.tagid:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: 'tagId'
        conditionExpression: 'true==true'
        formatExpression: a1

  builderius_setting.setting.htmlattribute:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    public: true
    arguments:
      - displayLabel: true
        name: 'htmlAttribute'
        label: 'Custom Attributes'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.html_attr' ]
        sortOrder: 3
        component: 'SettingHtmlAttribute'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        options:
          forbiddenNames: '%builderius_setting.setting.htmlattribute.a1.values%'
        schema:
          i1:
            type: 'array'
            of:
              type: 'object'
              shape:
                a1:
                  type: 'string'
                  validators:
                    - type: notInArray
                      params:
                        - '%builderius_setting.setting.htmlattribute.a1.values%'
                      message: 'html tag attribute name must not be in {{haystack}}'
                    - type: attributeName
                      message: 'Only a-z, A-Z, 0-9 and "-" are allowed for html attribute name, and "-" must not be first or last symbol. Must be longer than 1 symbol.'
                b1:
                  type: 'mixed'
                  validators:
                    - type: attributeValue
                      message: 'All letters, digits, single quote and special chars (EXCEPT double quotes) or valid serialized json are allowed'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.htmlattribute.value_expression.htmlattribute' ] ]
      - [ 'addFacade', [ '@builderius_setting.setting.htmlattribute.facade.attr_type.button' ] ]
      - [ 'addFacade', [ '@builderius_setting.setting.htmlattribute.facade.attr_type.input' ] ]
      - [ 'addFacade', [ '@builderius_setting.setting.htmlattribute.facade.image.alt' ] ]
      - [ 'addFacade', [ '@builderius_setting.setting.htmlattribute.facade.href.html_element' ] ]
      - [ 'addFacade', [ '@builderius_setting.setting.htmlattribute.facade.srcset.picture_source' ] ]
      - [ 'addFacade', [ '@builderius_setting.setting.htmlattribute.facade.src.media_source' ] ]
      - [ 'addFacade', [ '@builderius_setting.setting.htmlattribute.facade.attr_open' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.htmlattribute.value_expression.htmlattribute.items:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: 'items'
        contextSource: 'i1'
        conditionExpression: 'a1 !== null'
        formatExpression: '{"name": a1, "value": b1}'

  builderius_setting.setting.htmlattribute.value_expression.htmlattribute:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.htmlattribute.value_expression.htmlattribute.items' ] ]
    arguments:
      - name: 'htmlAttribute'
        conditionExpression: '!(items in [null, []])'
        formatExpression: "items"

  builderius_setting.setting.htmlattribute.facade.attr_type.button:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSettingFacade'
    arguments:
      - name: 'facadeButtonAttrType'
        label: 'Type'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 11
        component: 'SettingSelectAdvancedNonCNonM'
        options:
          values: [ 'button','submit','reset' ]
        appliedToModules: [ 'Button' ]
        dynamicData: true
        dynamicDataTypes: ['scalar']
        settingToFacadeExpression: >-
          createTempVariable(
            "flt",
            filter(
              s.i1,
              (value, k) -> {
                value.a1 === "type" && value.b1 !== null
              }
            )
          ) == true ?
          (
            count(tempVariable("flt")) === 1 ?
              {"a1": tempVariable("flt")[0].b1} :
            {"a1": ""}
          ) :
          {"a1": ""}
        facadeToSettingExpression: >-
          createTempVariable(
            "flt",
            findIndex(
              s.i1,
              (value, k) -> {
                  value.a1 === "type"
              }
            )
          ) == true ?
          (
            !(f.a1 in [null, ""]) ? (
              tempVariable("flt") !== -1 ?
              set(s, "i1[" ~ tempVariable("flt") ~ "].b1", f.a1) :
              {"i1": push(s.i1, {"a1": "type", "b1": f.a1})}
            ) :
            (
              tempVariable("flt") !== -1 ?
              unset(s, "i1[" ~ tempVariable("flt") ~ "]") :
              s
            )
          ) :
          s

  builderius_setting.setting.htmlattribute.facade.attr_type.input:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSettingFacade'
    arguments:
      - name: 'facadeInputAttrType'
        label: 'Type'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 11
        component: 'SettingSelectAdvancedNonCNonM'
        options:
          values: [ 'button','checkbox','color','date','datetime-local','email','file','hidden','image','month','number','password','radio','range','reset','search','submit','tel','text','time','url','week' ]
        appliedToModules: [ 'Input' ]
        dynamicData: false
        dynamicDataTypes: ['scalar']
        settingToFacadeExpression: >-
          createTempVariable(
            "flt",
            filter(
              s.i1,
              (value, k) -> {
                value.a1 === "type" && value.b1 !== null
              }
            )
          ) == true ?
          (
            count(tempVariable("flt")) === 1 ?
              {"a1": tempVariable("flt")[0].b1} :
            {"a1": ""}
          ) :
          {"a1": ""}
        facadeToSettingExpression: >-
          createTempVariable(
            "flt",
            findIndex(
              s.i1,
              (value, k) -> {
                  value.a1 === "type"
              }
            )
          ) == true ?
          (
            !(f.a1 in [null, ""]) ? (
              tempVariable("flt") !== -1 ?
              set(s, "i1[" ~ tempVariable("flt") ~ "].b1", f.a1) :
              {"i1": push(s.i1, {"a1": "type", "b1": f.a1})}
            ) :
            (
              tempVariable("flt") !== -1 ?
              unset(s, "i1[" ~ tempVariable("flt") ~ "]") :
              s
            )
          ) :
          s

  builderius_setting.setting.htmlattribute.facade.image.alt:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSettingFacade'
    arguments:
      - name: 'facadeImageAlt'
        label: 'Alt'
        paths: [ '@builderius_setting.path.module.primary.content' ]
        sortOrder: 11
        component: 'SettingDynamicInput'
        appliedToModules: [ 'Image' ]
        dynamicData: true
        dynamicDataTypes: [ 'scalar' ]
        settingToFacadeExpression: >-
          createTempVariable(
            "flt",
            filter(
              s.i1,
              (value, k) -> {
                value.a1 === "alt" && value.b1 !== null
              }
            )
          ) == true ?
          (
            count(tempVariable("flt")) === 1 ?
              {"a1": tempVariable("flt")[0].b1} :
            {"a1": ""}
          ) :
          {"a1": ""}
        facadeToSettingExpression: >-
          createTempVariable(
            "flt",
            findIndex(
              s.i1,
              (value, k) -> {
                  value.a1 === "alt"
              }
            )
          ) == true ?
          (
            !(f.a1 in [null, ""]) ? (
              tempVariable("flt") !== -1 ?
              set(s, "i1[" ~ tempVariable("flt") ~ "].b1", f.a1) :
              {"i1": push(s.i1, {"a1": "alt", "b1": f.a1})}
            ) :
            (
              tempVariable("flt") !== -1 ?
              unset(s, "i1[" ~ tempVariable("flt") ~ "]") :
              s
            )
          ) :
          s

  builderius_setting.setting.htmlattribute.facade.href.html_element:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSettingFacade'
    arguments:
      - name: 'facadeHtmlElementHref'
        label: 'Link URL'
        paths: ['@builderius_setting.path.module.primary.content']
        sortOrder: 11
        component: 'SettingDynamicInput'
        appliedToModules: ['HtmlElement']
        dynamicData: true
        dynamicDataTypes: ['scalar']
        showIf: 'isLinkWrapper.a1 == true'
        settingToFacadeExpression: >-
          createTempVariable(
            "flt",
            filter(
              s.i1,
              (value, k) -> {
                value.a1 === "href" && value.b1 !== null
              }
            )
          ) == true ?
          (
            count(tempVariable("flt")) === 1 ?
              {"a1": tempVariable("flt")[0].b1} :
            {"a1": ""}
          ) :
          {"a1": ""}
        facadeToSettingExpression: >-
          createTempVariable(
            "flt",
            findIndex(
              s.i1,
              (value, k) -> {
                  value.a1 === "href"
              }
            )
          ) == true ?
          (
            !(f.a1 in [null, ""]) ? (
              tempVariable("flt") !== -1 ?
              set(s, "i1[" ~ tempVariable("flt") ~ "].b1", f.a1) :
              {"i1": push(s.i1, {"a1": "href", "b1": f.a1})}
            ) :
            (
              tempVariable("flt") !== -1 ?
              unset(s, "i1[" ~ tempVariable("flt") ~ "]") :
              s
            )
          ) :
          s

  builderius_setting.setting.htmlattribute.facade.srcset.picture_source:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSettingFacade'
    arguments:
      - name: 'facadePictureSrcset'
        label: 'Image srcset'
        paths: ['@builderius_setting.path.module.primary.content']
        sortOrder: 11
        component: 'SettingImage'
        appliedToModules: ['Source']
        dynamicData: true
        dynamicDataTypes: ['scalar']
        showIf: 'forVideo.a1 == false || forVideo.a1 == null'
        settingToFacadeExpression: >-
          createTempVariable(
            "flt",
            filter(
              s.i1,
              (value, k) -> {
                value.a1 === "srcset" && value.b1 !== null
              }
            )
          ) == true ?
          (
            count(tempVariable("flt")) === 1 ?
              {"a1": tempVariable("flt")[0].b1} :
            {"a1": ""}
          ) :
          {"a1": ""}
        facadeToSettingExpression: >-
          createTempVariable(
            "flt",
            findIndex(
              s.i1,
              (value, k) -> {
                  value.a1 === "srcset"
              }
            )
          ) == true ?
          (
            !(f.a1 in [null, ""]) ? (
              tempVariable("flt") !== -1 ?
              set(s, "i1[" ~ tempVariable("flt") ~ "].b1", f.a1) :
              {"i1": push(s.i1, {"a1": "srcset", "b1": f.a1})}
            ) :
            (
              tempVariable("flt") !== -1 ?
              unset(s, "i1[" ~ tempVariable("flt") ~ "]") :
              s
            )
          ) :
          s

  builderius_setting.setting.htmlattribute.facade.src.media_source:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSettingFacade'
    arguments:
      - name: 'facadeMediaSrc'
        label: 'Media file src'
        paths: ['@builderius_setting.path.module.primary.content']
        sortOrder: 11
        component: 'SettingMedia'
        appliedToModules: ['Source']
        dynamicData: true
        dynamicDataTypes: ['scalar']
        showIf: 'forVideo.a1 == true'
        settingToFacadeExpression: >-
          createTempVariable(
            "flt",
            filter(
              s.i1,
              (value, k) -> {
                value.a1 === "src" && value.b1 !== null
              }
            )
          ) == true ?
          (
            count(tempVariable("flt")) === 1 ?
              {"a1": tempVariable("flt")[0].b1} :
            {"a1": ""}
          ) :
          {"a1": ""}
        facadeToSettingExpression: >-
          createTempVariable(
            "flt",
            findIndex(
              s.i1,
              (value, k) -> {
                  value.a1 === "src"
              }
            )
          ) == true ?
          (
            !(f.a1 in [null, ""]) ? (
              tempVariable("flt") !== -1 ?
              set(s, "i1[" ~ tempVariable("flt") ~ "].b1", f.a1) :
              {"i1": push(s.i1, {"a1": "src", "b1": f.a1})}
            ) :
            (
              tempVariable("flt") !== -1 ?
              unset(s, "i1[" ~ tempVariable("flt") ~ "]") :
              s
            )
          ) :
          s

  builderius_setting.setting.htmlattribute.facade.attr_open:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSettingFacade'
    arguments:
      - name: 'facadeAttrOpen'
        label: 'Show in builder'
        paths: ['@builderius_setting.path.module.primary.content']
        sortOrder: 10
        component: 'SettingCheckbox'
        appliedToModules: ['CookieNotice']
        dynamicData: false
        settingToFacadeExpression: >-
          createTempVariable(
            "flt",
            filter(
              s.i1,
              (value, k) -> {
                value.a1 === "open" && !(value.b1 in [null, ''])
              }
            )
          ) == true ?
          (
            count(tempVariable("flt")) === 1 ?
              {"a1": true} :
            {"a1": ""}
          ) :
          {"a1": ""}
        facadeToSettingExpression: >-
          createTempVariable(
            "flt",
            findIndex(
              s.i1,
              (value, k) -> {
                  value.a1 === "open"
              }
            )
          ) == true ?
          (
            (f.a1 in [true, "true"]) ? (
              tempVariable("flt") !== -1 ?
              set(s, "i1[" ~ tempVariable("flt") ~ "].b1", true) :
              {"i1": push(s.i1, {"a1": "open", "b1": true})}
            ) :
            (
              tempVariable("flt") !== -1 ?
              unset(s, "i1[" ~ tempVariable("flt") ~ "]") :
              s
            )
          ) :
          s

  #-----------------Category Conditions -----------------------------------------

  builderius_setting.setting.visibility_condition:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleSetting'
    public: true
    arguments:
      - displayLabel: true
        name: 'visibilityCondition'
        label: 'Rendering conditions'
        contentType: 'html'
        paths: [ '@builderius_setting.path.module.primary.conditions' ]
        sortOrder: 10
        component: 'SettingRenderingCondition'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        dynamicData: false
        dynamicDataTypes: []
        schema:
          i1:
            type: 'object'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.visibility_condition.value_expression.visibility_condition' ] ]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.visibility_condition.value_expression.visibility_condition:
    class: Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression
    arguments:
      - name: 'visibilityCondition'
        conditionExpression: 'true'
        formatExpression: 'processVisibilityCondition(i1)'

  #-----------------Category Data Variables--------------------------------------

  builderius_setting.setting.data_vars:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusSetting'
    arguments:
      - displayLabel: true
        name: 'dataVars'
        label: 'Data Variables'
        contentType: 'dataVars'
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        paths: ['@builderius_setting.path.global.primary.data_vars', '@builderius_setting.path.template.primary.data_vars']
        sortOrder: 1
        component: 'SettingDataVariables'
        options:
          variablesTypes: '%builderius_setting.setting.data_vars.type.values%'
        schema:
          i1:
            type: 'array'
            validators:
              - type: unique
                params:
                  - 'b1'
                message: 'Data variables names must be unique. Name "wp" is reserved.'
            of:
              type: 'object'
              validators:
                - type: dataVariableIntValue
                - type: dataVariableFloatValue
                - type: dataVariableBooleanValue
                - type: dataVariableJsonValue
              shape:
                a1:   # type
                  type: 'string'
                b1:   # name
                  type: 'string'
                  validators:
                    - type: required
                      message: "name can't be blank"
                    - type: dataVariableName
                c1:   # value
                  type: 'mixed'
                d1:   # value
                  type: 'mixed'
    calls:
      - ['addValueExpression', ['@builderius_setting.setting.data_vars.value_expression.data_vars']]
      #- ['addDefaultValue', ['@builderius_setting.setting.datavars.default_value.global_all', ['global_all_html']]]
      - ['addDefaultValue', ['@builderius_setting.setting.datavars.default_value.template_singular',  ['template_template_html']]]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.data_vars.value_expression.data_vars.items:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression'
    arguments:
      - name: 'items'
        contextSource: 'i1'
        conditionExpression: 'true'
        formatExpression: '{"name": b1, "type": a1, "value": (a1 === "graphQLQuery" ? {"query": c1, "variables": d1} : c1)}'

  builderius_setting.setting.data_vars.value_expression.data_vars:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression'
    calls:
      - [ 'addDependsOnSettingValueExpression', [ '@builderius_setting.setting.data_vars.value_expression.data_vars.items' ] ]
    arguments:
      - name: null
        conditionExpression: 'true'
        formatExpression: 'items'


  #-----------------Category CSS Variables---------------------------------------

  builderius_setting.setting.mod_css_vars:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusModuleCssSetting'
    arguments:
      - displayLabel: true
        name: 'modCssVars'
        label: 'CSS Variables'
        paths: [ '@builderius_setting.path.module.advanced.css_vars' ]
        sortOrder: 2
        component: 'SettingCssVariables'
        appliedToAllModules: true
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        options:
          values: '%builderius_setting.setting.css_vars.type.values%'
          unitsValues: '%builderius_setting.setting.css_vars.units.value%'
        schema:
          i1:
            type: 'array'
            validators:
              - type: unique
                params:
                  - 'a2'
                message: 'CSS variables names must be unique'
            of:
              type: 'object'
              validators:
                - type: cssVariableIntValue
                - type: cssVariableNumberValue
                - type: cssVariableAnyValue
              shape:
                a1:
                  type: 'string'
                  validators:
                    - type: inArray
                      params:
                        - '%builderius_setting.setting.css_vars.type.values%'
                      message: 'CSS var type must be one of: {{haystack}}'
                a2:
                  type: 'string'
                  validators:
                    - type: cssVariableName
                b2:
                  type: 'string'
                c2:
                  type: 'string'
    calls:
      - [ 'addValueExpression', [ '@builderius_setting.setting.css_vars.value_expression.css_vars' ] ]
    tags:
      - { name: builderius_setting }

#--------------- Category Media Queries -----------------

  builderius_setting.setting.responsive_strategy:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusSetting'
    arguments:
      - displayLabel: true
        name: 'responsiveStrategy'
        label: 'Responsive Strategy'
        contentType: 'responsiveStrategy'
        appliedToAllTemplateTypes: true
        appliedToAllTechnologies: true
        paths: ['@builderius_setting.path.global.primary.general', '@builderius_setting.path.template.primary.general']
        sortOrder: 1
        component: 'SettingSelect'
        options:
          values: '%builderius_setting.setting.responsive_strategy.a1.values%'
          multiple: false
        schema:
          a1:
            type: 'string'
            validators:
              - type: inArray
                params:
                  - '%builderius_setting.setting.responsive_strategy.a1.values%'
    calls:
      - ['addValueExpression', ['@builderius_setting.setting.responsive_strategy.value_expression.responsive_strategy']]
      - ['addDefaultValue', ['@builderius_setting.setting.responsive_strategy.default_value']]
    tags:
      - { name: builderius_setting }

  builderius_setting.setting.responsive_strategy.value_expression.responsive_strategy:
    class: 'Builderius\Bundle\SettingBundle\Model\BuilderiusSettingValueExpression'
    arguments:
      - name: 'responsiveStrategy'
        conditionExpression: 'true==true'
        formatExpression: a1
